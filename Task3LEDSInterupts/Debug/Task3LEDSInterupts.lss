
Task3LEDSInterupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002160  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00002160  000021f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d4  0080008e  0080008e  00002222  2**0
                  ALLOC
  3 .stab         00003138  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001824  00000000  00000000  0000535c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__vector_10>
      2c:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 00 	call	0x182	; 0x182 <main>
      8a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Interupt_voidTIMER0ISR>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	80 91 97 00 	lds	r24, 0x0097
      9e:	8f 5f       	subi	r24, 0xFF	; 255
      a0:	80 93 97 00 	sts	0x0097, r24
      a4:	80 91 96 00 	lds	r24, 0x0096
      a8:	8f 5f       	subi	r24, 0xFF	; 255
      aa:	80 93 96 00 	sts	0x0096, r24
      ae:	80 91 95 00 	lds	r24, 0x0095
      b2:	8f 5f       	subi	r24, 0xFF	; 255
      b4:	80 93 95 00 	sts	0x0095, r24
      b8:	80 91 97 00 	lds	r24, 0x0097
      bc:	85 3f       	cpi	r24, 0xF5	; 245
      be:	89 f4       	brne	.+34     	; 0xe2 <Interupt_voidTIMER0ISR+0x50>
      c0:	10 92 97 00 	sts	0x0097, r1
      c4:	90 91 62 00 	lds	r25, 0x0062
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	89 27       	eor	r24, r25
      cc:	80 93 62 00 	sts	0x0062, r24
      d0:	90 91 91 00 	lds	r25, 0x0091
      d4:	80 91 62 00 	lds	r24, 0x0062
      d8:	98 23       	and	r25, r24
      da:	88 e0       	ldi	r24, 0x08	; 8
      dc:	69 2f       	mov	r22, r25
      de:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
      e2:	80 91 96 00 	lds	r24, 0x0096
      e6:	8a 37       	cpi	r24, 0x7A	; 122
      e8:	89 f4       	brne	.+34     	; 0x10c <Interupt_voidTIMER0ISR+0x7a>
      ea:	10 92 96 00 	sts	0x0096, r1
      ee:	90 91 61 00 	lds	r25, 0x0061
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	89 27       	eor	r24, r25
      f6:	80 93 61 00 	sts	0x0061, r24
      fa:	90 91 92 00 	lds	r25, 0x0092
      fe:	80 91 61 00 	lds	r24, 0x0061
     102:	98 23       	and	r25, r24
     104:	89 e0       	ldi	r24, 0x09	; 9
     106:	69 2f       	mov	r22, r25
     108:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     10c:	80 91 95 00 	lds	r24, 0x0095
     110:	8e 33       	cpi	r24, 0x3E	; 62
     112:	89 f4       	brne	.+34     	; 0x136 <Interupt_voidTIMER0ISR+0xa4>
     114:	10 92 95 00 	sts	0x0095, r1
     118:	90 91 60 00 	lds	r25, 0x0060
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	89 27       	eor	r24, r25
     120:	80 93 60 00 	sts	0x0060, r24
     124:	90 91 93 00 	lds	r25, 0x0093
     128:	80 91 60 00 	lds	r24, 0x0060
     12c:	98 23       	and	r25, r24
     12e:	8a e0       	ldi	r24, 0x0A	; 10
     130:	69 2f       	mov	r22, r25
     132:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     136:	cf 91       	pop	r28
     138:	df 91       	pop	r29
     13a:	08 95       	ret

0000013c <__vector_1>:
}



 ISR(__vector_1)
 {
     13c:	1f 92       	push	r1
     13e:	0f 92       	push	r0
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	0f 92       	push	r0
     144:	11 24       	eor	r1, r1
     146:	8f 93       	push	r24
     148:	df 93       	push	r29
     14a:	cf 93       	push	r28
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
 	static u8 local_u8counter=0;
 //	static u8 local_u8prevVal=0x01;

 	local_u8counter++;
     150:	80 91 98 00 	lds	r24, 0x0098
     154:	8f 5f       	subi	r24, 0xFF	; 255
     156:	80 93 98 00 	sts	0x0098, r24
// 	if(local_u8counter==4)
// 	{

 //		local_u8counter=0;
 		 glopal_led1=led1;
     15a:	80 91 8e 00 	lds	r24, 0x008E
     15e:	80 93 91 00 	sts	0x0091, r24
 		 glopal_led2=led2;
     162:	80 91 8f 00 	lds	r24, 0x008F
     166:	80 93 92 00 	sts	0x0092, r24
 		 glopal_led3=led3;
     16a:	80 91 90 00 	lds	r24, 0x0090
     16e:	80 93 93 00 	sts	0x0093, r24
// 	}
// 	else {
// 	}


 }
     172:	cf 91       	pop	r28
     174:	df 91       	pop	r29
     176:	8f 91       	pop	r24
     178:	0f 90       	pop	r0
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	0f 90       	pop	r0
     17e:	1f 90       	pop	r1
     180:	18 95       	reti

00000182 <main>:

int main(void) {
     182:	df 93       	push	r29
     184:	cf 93       	push	r28
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	28 97       	sbiw	r28, 0x08	; 8
     18c:	0f b6       	in	r0, 0x3f	; 63
     18e:	f8 94       	cli
     190:	de bf       	out	0x3e, r29	; 62
     192:	0f be       	out	0x3f, r0	; 63
     194:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8_keypadVal=0,oldVal=0;
     196:	1e 82       	std	Y+6, r1	; 0x06
     198:	1d 82       	std	Y+5, r1	; 0x05
	DIO_voidInit();
     19a:	0e 94 98 09 	call	0x1330	; 0x1330 <DIO_voidInit>
	KPD_voidInit();
     19e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <KPD_voidInit>
	 DIO_u8WritePinVal(DIO_u8PIN30,DIO_u8LOW);
     1a2:	8e e1       	ldi	r24, 0x1E	; 30
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
	// DIO_u8WritePinVal(DIO_u8PIN30,DIO_u8HIGH);
	 Delay(250);
     1aa:	19 82       	std	Y+1, r1	; 0x01
     1ac:	1a 82       	std	Y+2, r1	; 0x02
     1ae:	1b 82       	std	Y+3, r1	; 0x03
     1b0:	1c 82       	std	Y+4, r1	; 0x04
     1b2:	0c c0       	rjmp	.+24     	; 0x1cc <main+0x4a>
     1b4:	00 00       	nop
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ba:	ab 81       	ldd	r26, Y+3	; 0x03
     1bc:	bc 81       	ldd	r27, Y+4	; 0x04
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	a1 1d       	adc	r26, r1
     1c2:	b1 1d       	adc	r27, r1
     1c4:	89 83       	std	Y+1, r24	; 0x01
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	ab 83       	std	Y+3, r26	; 0x03
     1ca:	bc 83       	std	Y+4, r27	; 0x04
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	ab 81       	ldd	r26, Y+3	; 0x03
     1d2:	bc 81       	ldd	r27, Y+4	; 0x04
     1d4:	88 3b       	cpi	r24, 0xB8	; 184
     1d6:	21 e6       	ldi	r18, 0x61	; 97
     1d8:	92 07       	cpc	r25, r18
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	a2 07       	cpc	r26, r18
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	b2 07       	cpc	r27, r18
     1e2:	40 f3       	brcs	.-48     	; 0x1b4 <main+0x32>
	Timer0_voidSet_ISR(Interupt_voidTIMER0ISR);
     1e4:	89 e4       	ldi	r24, 0x49	; 73
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <Timer0_voidSet_ISR>
	 //DIO_u8WritePinVal(DIO_u8PIN30,DIO_u8LOW);

	Timer0_voidInit();
     1ec:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <Timer0_voidInit>
	InteruptInit();
     1f0:	0e 94 2d 01 	call	0x25a	; 0x25a <InteruptInit>

while(1){

	KPD_u8Read(&local_u8_keypadVal);
     1f4:	ce 01       	movw	r24, r28
     1f6:	06 96       	adiw	r24, 0x06	; 6
     1f8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <KPD_u8Read>
			if(local_u8_keypadVal!=oldVal)
     1fc:	9e 81       	ldd	r25, Y+6	; 0x06
     1fe:	8d 81       	ldd	r24, Y+5	; 0x05
     200:	98 17       	cp	r25, r24
     202:	41 f1       	breq	.+80     	; 0x254 <main+0xd2>
			{
				switch(local_u8_keypadVal)
     204:	8e 81       	ldd	r24, Y+6	; 0x06
     206:	28 2f       	mov	r18, r24
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	38 87       	std	Y+8, r19	; 0x08
     20c:	2f 83       	std	Y+7, r18	; 0x07
     20e:	8f 81       	ldd	r24, Y+7	; 0x07
     210:	98 85       	ldd	r25, Y+8	; 0x08
     212:	86 30       	cpi	r24, 0x06	; 6
     214:	91 05       	cpc	r25, r1
     216:	c1 f0       	breq	.+48     	; 0x248 <main+0xc6>
     218:	2f 81       	ldd	r18, Y+7	; 0x07
     21a:	38 85       	ldd	r19, Y+8	; 0x08
     21c:	27 30       	cpi	r18, 0x07	; 7
     21e:	31 05       	cpc	r19, r1
     220:	61 f0       	breq	.+24     	; 0x23a <main+0xb8>
     222:	8f 81       	ldd	r24, Y+7	; 0x07
     224:	98 85       	ldd	r25, Y+8	; 0x08
     226:	85 30       	cpi	r24, 0x05	; 5
     228:	91 05       	cpc	r25, r1
     22a:	a1 f4       	brne	.+40     	; 0x254 <main+0xd2>
				{
				//left
				case 5:
					led1=Togglebit(led1,0);
     22c:	80 91 8e 00 	lds	r24, 0x008E
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	89 27       	eor	r24, r25
     234:	80 93 8e 00 	sts	0x008E, r24
     238:	0d c0       	rjmp	.+26     	; 0x254 <main+0xd2>
					break;
				//right
				case 7:
					led2=Togglebit(led2,0);
     23a:	80 91 8f 00 	lds	r24, 0x008F
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	89 27       	eor	r24, r25
     242:	80 93 8f 00 	sts	0x008F, r24
     246:	06 c0       	rjmp	.+12     	; 0x254 <main+0xd2>
					break;
					//rotate
				case 6:
					led3=Togglebit(led3,0);
     248:	80 91 90 00 	lds	r24, 0x0090
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	89 27       	eor	r24, r25
     250:	80 93 90 00 	sts	0x0090, r24

				}

						 				}else{}

				oldVal=local_u8_keypadVal;
     254:	8e 81       	ldd	r24, Y+6	; 0x06
     256:	8d 83       	std	Y+5, r24	; 0x05
     258:	cd cf       	rjmp	.-102    	; 0x1f4 <main+0x72>

0000025a <InteruptInit>:
	return 0;
}


void InteruptInit(void)
{
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
	ExtInter_u8MCUCR=Setbit(ExtInter_u8MCUCR,0);
     262:	a5 e5       	ldi	r26, 0x55	; 85
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	e5 e5       	ldi	r30, 0x55	; 85
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	81 60       	ori	r24, 0x01	; 1
     26e:	8c 93       	st	X, r24
	ExtInter_u8MCUCR=Clrbit(ExtInter_u8MCUCR,1);
     270:	a5 e5       	ldi	r26, 0x55	; 85
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	e5 e5       	ldi	r30, 0x55	; 85
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	8d 7f       	andi	r24, 0xFD	; 253
     27c:	8c 93       	st	X, r24

	ExtInter_u8GICR=Setbit(ExtInter_u8GICR,6);
     27e:	ab e5       	ldi	r26, 0x5B	; 91
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	eb e5       	ldi	r30, 0x5B	; 91
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	80 64       	ori	r24, 0x40	; 64
     28a:	8c 93       	st	X, r24


//	__asm__("SEI");
}
     28c:	cf 91       	pop	r28
     28e:	df 91       	pop	r29
     290:	08 95       	ret

00000292 <LCD_u8writeToDataPins>:
#include"LCD_Private.h"

u8 global_u8LCDPins[LCD_U8DATAPINS]={LCD_u8D0,LCD_u8D1,LCD_u8D2,LCD_u8D3,LCD_u8D4,LCD_u8D5,LCD_u8D6,LCD_u8D7};

static u8 LCD_u8writeToDataPins(u8 copy_u8Data)
{u8 local_u8Counter;
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	00 d0       	rcall	.+0      	; 0x298 <LCD_u8writeToDataPins+0x6>
     298:	00 d0       	rcall	.+0      	; 0x29a <LCD_u8writeToDataPins+0x8>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	8c 83       	std	Y+4, r24	; 0x04
u8 local_u8Temp;
u8 local_u8OperationStatus=ok;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	89 83       	std	Y+1, r24	; 0x01
for(local_u8Counter=0;local_u8Counter<8;local_u8Counter++)
     2a4:	1b 82       	std	Y+3, r1	; 0x03
     2a6:	29 c0       	rjmp	.+82     	; 0x2fa <LCD_u8writeToDataPins+0x68>
{
//	copy_u8Data>>=local_u8Counter;

	local_u8Temp=GetBit(copy_u8Data,local_u8Counter);
     2a8:	8c 81       	ldd	r24, Y+4	; 0x04
     2aa:	48 2f       	mov	r20, r24
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	8b 81       	ldd	r24, Y+3	; 0x03
     2b0:	28 2f       	mov	r18, r24
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <LCD_u8writeToDataPins+0x2c>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	2a 95       	dec	r18
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <LCD_u8writeToDataPins+0x28>
     2c2:	9a 01       	movw	r18, r20
     2c4:	28 23       	and	r18, r24
     2c6:	39 23       	and	r19, r25
     2c8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ca:	88 2f       	mov	r24, r24
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	a9 01       	movw	r20, r18
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <LCD_u8writeToDataPins+0x44>
     2d2:	55 95       	asr	r21
     2d4:	47 95       	ror	r20
     2d6:	8a 95       	dec	r24
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <LCD_u8writeToDataPins+0x40>
     2da:	ca 01       	movw	r24, r20
     2dc:	8a 83       	std	Y+2, r24	; 0x02
	local_u8OperationStatus=DIO_u8WritePinVal(global_u8LCDPins[local_u8Counter],local_u8Temp);
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	fc 01       	movw	r30, r24
     2e6:	ed 59       	subi	r30, 0x9D	; 157
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	80 81       	ld	r24, Z
     2ec:	6a 81       	ldd	r22, Y+2	; 0x02
     2ee:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     2f2:	89 83       	std	Y+1, r24	; 0x01

static u8 LCD_u8writeToDataPins(u8 copy_u8Data)
{u8 local_u8Counter;
u8 local_u8Temp;
u8 local_u8OperationStatus=ok;
for(local_u8Counter=0;local_u8Counter<8;local_u8Counter++)
     2f4:	8b 81       	ldd	r24, Y+3	; 0x03
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	8b 83       	std	Y+3, r24	; 0x03
     2fa:	8b 81       	ldd	r24, Y+3	; 0x03
     2fc:	88 30       	cpi	r24, 0x08	; 8
     2fe:	a0 f2       	brcs	.-88     	; 0x2a8 <LCD_u8writeToDataPins+0x16>

	local_u8Temp=GetBit(copy_u8Data,local_u8Counter);
	local_u8OperationStatus=DIO_u8WritePinVal(global_u8LCDPins[local_u8Counter],local_u8Temp);
}

return local_u8OperationStatus;
     300:	89 81       	ldd	r24, Y+1	; 0x01
}
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	cf 91       	pop	r28
     30c:	df 91       	pop	r29
     30e:	08 95       	ret

00000310 <LCD_u8Writecommand>:

/*comment!:Write Command to the LCD returns the statuw */
extern u8 LCD_u8Writecommand(u8 copy_u8Command) {
     310:	df 93       	push	r29
     312:	cf 93       	push	r28
     314:	00 d0       	rcall	.+0      	; 0x316 <LCD_u8Writecommand+0x6>
     316:	00 d0       	rcall	.+0      	; 0x318 <LCD_u8Writecommand+0x8>
     318:	00 d0       	rcall	.+0      	; 0x31a <LCD_u8Writecommand+0xa>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	8e 83       	std	Y+6, r24	; 0x06
	u8 local_u8OperationStatus = ok;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	8d 83       	std	Y+5, r24	; 0x05

	//make the data on the data
	LCD_u8writeToDataPins(copy_u8Command);
     324:	8e 81       	ldd	r24, Y+6	; 0x06
     326:	0e 94 49 01 	call	0x292	; 0x292 <LCD_u8writeToDataPins>
	local_u8OperationStatus = DIO_u8WritePinVal(LCD_u8RS, LCD_U8RS_COMMAND_VAL);
     32a:	82 e1       	ldi	r24, 0x12	; 18
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     332:	8d 83       	std	Y+5, r24	; 0x05
	local_u8OperationStatus = DIO_u8WritePinVal(LCD_u8RW, DIO_u8LOW);
     334:	81 e1       	ldi	r24, 0x11	; 17
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     33c:	8d 83       	std	Y+5, r24	; 0x05
	//Make apulse on the enable pins
	local_u8OperationStatus = DIO_u8WritePinVal(LCD_u8Enable, DIO_u8HIGH);
     33e:	80 e1       	ldi	r24, 0x10	; 16
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     346:	8d 83       	std	Y+5, r24	; 0x05
	Delay(1);
     348:	19 82       	std	Y+1, r1	; 0x01
     34a:	1a 82       	std	Y+2, r1	; 0x02
     34c:	1b 82       	std	Y+3, r1	; 0x03
     34e:	1c 82       	std	Y+4, r1	; 0x04
     350:	0c c0       	rjmp	.+24     	; 0x36a <LCD_u8Writecommand+0x5a>
     352:	00 00       	nop
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	9a 81       	ldd	r25, Y+2	; 0x02
     358:	ab 81       	ldd	r26, Y+3	; 0x03
     35a:	bc 81       	ldd	r27, Y+4	; 0x04
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	a1 1d       	adc	r26, r1
     360:	b1 1d       	adc	r27, r1
     362:	89 83       	std	Y+1, r24	; 0x01
     364:	9a 83       	std	Y+2, r25	; 0x02
     366:	ab 83       	std	Y+3, r26	; 0x03
     368:	bc 83       	std	Y+4, r27	; 0x04
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	ab 81       	ldd	r26, Y+3	; 0x03
     370:	bc 81       	ldd	r27, Y+4	; 0x04
     372:	84 37       	cpi	r24, 0x74	; 116
     374:	91 05       	cpc	r25, r1
     376:	a1 05       	cpc	r26, r1
     378:	b1 05       	cpc	r27, r1
     37a:	58 f3       	brcs	.-42     	; 0x352 <LCD_u8Writecommand+0x42>
	local_u8OperationStatus = DIO_u8WritePinVal(LCD_u8Enable, DIO_u8LOW);
     37c:	80 e1       	ldi	r24, 0x10	; 16
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     384:	8d 83       	std	Y+5, r24	; 0x05

	return local_u8OperationStatus;
     386:	8d 81       	ldd	r24, Y+5	; 0x05
}
     388:	26 96       	adiw	r28, 0x06	; 6
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
     394:	cf 91       	pop	r28
     396:	df 91       	pop	r29
     398:	08 95       	ret

0000039a <LCD_u8WriteData>:
/*comment!:Write Data to LCD */
extern u8 LCD_u8WriteData(u8 copy_u8Data) {
     39a:	df 93       	push	r29
     39c:	cf 93       	push	r28
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <LCD_u8WriteData+0x6>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <LCD_u8WriteData+0x8>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <LCD_u8WriteData+0xa>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	8e 83       	std	Y+6, r24	; 0x06

	u8 local_u8OperationStatus = ok;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	8d 83       	std	Y+5, r24	; 0x05

	//make the data on the data BUS
	LCD_u8writeToDataPins(copy_u8Data);
     3ae:	8e 81       	ldd	r24, Y+6	; 0x06
     3b0:	0e 94 49 01 	call	0x292	; 0x292 <LCD_u8writeToDataPins>
	local_u8OperationStatus = DIO_u8WritePinVal(LCD_u8RS, LCD_U8RS_DATA_VAL);
     3b4:	82 e1       	ldi	r24, 0x12	; 18
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     3bc:	8d 83       	std	Y+5, r24	; 0x05
	//wrting to hte data BUS
	local_u8OperationStatus = DIO_u8WritePinVal(LCD_u8RW, DIO_u8LOW);
     3be:	81 e1       	ldi	r24, 0x11	; 17
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     3c6:	8d 83       	std	Y+5, r24	; 0x05
	//Make apulse on the enable pins
	local_u8OperationStatus = DIO_u8WritePinVal(LCD_u8Enable, DIO_u8HIGH);
     3c8:	80 e1       	ldi	r24, 0x10	; 16
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     3d0:	8d 83       	std	Y+5, r24	; 0x05
	Delay(1);
     3d2:	19 82       	std	Y+1, r1	; 0x01
     3d4:	1a 82       	std	Y+2, r1	; 0x02
     3d6:	1b 82       	std	Y+3, r1	; 0x03
     3d8:	1c 82       	std	Y+4, r1	; 0x04
     3da:	0c c0       	rjmp	.+24     	; 0x3f4 <LCD_u8WriteData+0x5a>
     3dc:	00 00       	nop
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	9a 81       	ldd	r25, Y+2	; 0x02
     3e2:	ab 81       	ldd	r26, Y+3	; 0x03
     3e4:	bc 81       	ldd	r27, Y+4	; 0x04
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	a1 1d       	adc	r26, r1
     3ea:	b1 1d       	adc	r27, r1
     3ec:	89 83       	std	Y+1, r24	; 0x01
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	ab 83       	std	Y+3, r26	; 0x03
     3f2:	bc 83       	std	Y+4, r27	; 0x04
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	ab 81       	ldd	r26, Y+3	; 0x03
     3fa:	bc 81       	ldd	r27, Y+4	; 0x04
     3fc:	84 37       	cpi	r24, 0x74	; 116
     3fe:	91 05       	cpc	r25, r1
     400:	a1 05       	cpc	r26, r1
     402:	b1 05       	cpc	r27, r1
     404:	58 f3       	brcs	.-42     	; 0x3dc <LCD_u8WriteData+0x42>
	local_u8OperationStatus = DIO_u8WritePinVal(LCD_u8Enable, DIO_u8LOW);
     406:	80 e1       	ldi	r24, 0x10	; 16
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
     40e:	8d 83       	std	Y+5, r24	; 0x05

	return local_u8OperationStatus;
     410:	8d 81       	ldd	r24, Y+5	; 0x05

}
     412:	26 96       	adiw	r28, 0x06	; 6
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	cf 91       	pop	r28
     420:	df 91       	pop	r29
     422:	08 95       	ret

00000424 <LCD_VOIDInit>:

extern void LCD_VOIDInit(void) { //making the start Activity diagram  of the LC
     424:	df 93       	push	r29
     426:	cf 93       	push	r28
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	2c 97       	sbiw	r28, 0x0c	; 12
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
//delay 15 milli second as the LCD ooperating on 5v
	Delay(15);
     438:	19 86       	std	Y+9, r1	; 0x09
     43a:	1a 86       	std	Y+10, r1	; 0x0a
     43c:	1b 86       	std	Y+11, r1	; 0x0b
     43e:	1c 86       	std	Y+12, r1	; 0x0c
     440:	0c c0       	rjmp	.+24     	; 0x45a <LCD_VOIDInit+0x36>
     442:	00 00       	nop
     444:	89 85       	ldd	r24, Y+9	; 0x09
     446:	9a 85       	ldd	r25, Y+10	; 0x0a
     448:	ab 85       	ldd	r26, Y+11	; 0x0b
     44a:	bc 85       	ldd	r27, Y+12	; 0x0c
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	a1 1d       	adc	r26, r1
     450:	b1 1d       	adc	r27, r1
     452:	89 87       	std	Y+9, r24	; 0x09
     454:	9a 87       	std	Y+10, r25	; 0x0a
     456:	ab 87       	std	Y+11, r26	; 0x0b
     458:	bc 87       	std	Y+12, r27	; 0x0c
     45a:	89 85       	ldd	r24, Y+9	; 0x09
     45c:	9a 85       	ldd	r25, Y+10	; 0x0a
     45e:	ab 85       	ldd	r26, Y+11	; 0x0b
     460:	bc 85       	ldd	r27, Y+12	; 0x0c
     462:	8c 3e       	cpi	r24, 0xEC	; 236
     464:	25 e0       	ldi	r18, 0x05	; 5
     466:	92 07       	cpc	r25, r18
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	a2 07       	cpc	r26, r18
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	b2 07       	cpc	r27, r18
     470:	40 f3       	brcs	.-48     	; 0x442 <LCD_VOIDInit+0x1e>
	LCD_u8Writecommand(0b00110000);
     472:	80 e3       	ldi	r24, 0x30	; 48
     474:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
	Delay(5);
     478:	1d 82       	std	Y+5, r1	; 0x05
     47a:	1e 82       	std	Y+6, r1	; 0x06
     47c:	1f 82       	std	Y+7, r1	; 0x07
     47e:	18 86       	std	Y+8, r1	; 0x08
     480:	0c c0       	rjmp	.+24     	; 0x49a <LCD_VOIDInit+0x76>
     482:	00 00       	nop
     484:	8d 81       	ldd	r24, Y+5	; 0x05
     486:	9e 81       	ldd	r25, Y+6	; 0x06
     488:	af 81       	ldd	r26, Y+7	; 0x07
     48a:	b8 85       	ldd	r27, Y+8	; 0x08
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	a1 1d       	adc	r26, r1
     490:	b1 1d       	adc	r27, r1
     492:	8d 83       	std	Y+5, r24	; 0x05
     494:	9e 83       	std	Y+6, r25	; 0x06
     496:	af 83       	std	Y+7, r26	; 0x07
     498:	b8 87       	std	Y+8, r27	; 0x08
     49a:	8d 81       	ldd	r24, Y+5	; 0x05
     49c:	9e 81       	ldd	r25, Y+6	; 0x06
     49e:	af 81       	ldd	r26, Y+7	; 0x07
     4a0:	b8 85       	ldd	r27, Y+8	; 0x08
     4a2:	84 30       	cpi	r24, 0x04	; 4
     4a4:	22 e0       	ldi	r18, 0x02	; 2
     4a6:	92 07       	cpc	r25, r18
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	a2 07       	cpc	r26, r18
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	b2 07       	cpc	r27, r18
     4b0:	40 f3       	brcs	.-48     	; 0x482 <LCD_VOIDInit+0x5e>
	LCD_u8Writecommand(0b00110000);
     4b2:	80 e3       	ldi	r24, 0x30	; 48
     4b4:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
	Delay(1);
     4b8:	19 82       	std	Y+1, r1	; 0x01
     4ba:	1a 82       	std	Y+2, r1	; 0x02
     4bc:	1b 82       	std	Y+3, r1	; 0x03
     4be:	1c 82       	std	Y+4, r1	; 0x04
     4c0:	0c c0       	rjmp	.+24     	; 0x4da <LCD_VOIDInit+0xb6>
     4c2:	00 00       	nop
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	ab 81       	ldd	r26, Y+3	; 0x03
     4ca:	bc 81       	ldd	r27, Y+4	; 0x04
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	a1 1d       	adc	r26, r1
     4d0:	b1 1d       	adc	r27, r1
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	9a 83       	std	Y+2, r25	; 0x02
     4d6:	ab 83       	std	Y+3, r26	; 0x03
     4d8:	bc 83       	std	Y+4, r27	; 0x04
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	ab 81       	ldd	r26, Y+3	; 0x03
     4e0:	bc 81       	ldd	r27, Y+4	; 0x04
     4e2:	84 37       	cpi	r24, 0x74	; 116
     4e4:	91 05       	cpc	r25, r1
     4e6:	a1 05       	cpc	r26, r1
     4e8:	b1 05       	cpc	r27, r1
     4ea:	58 f3       	brcs	.-42     	; 0x4c2 <LCD_VOIDInit+0x9e>
	LCD_u8Writecommand(0b00110000);
     4ec:	80 e3       	ldi	r24, 0x30	; 48
     4ee:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
// STARTING INITIALIZATION
	// Function Set intialization
	LCD_u8Writecommand(0b00111000);
     4f2:	88 e3       	ldi	r24, 0x38	; 56
     4f4:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
	//Entery mod set
	LCD_u8Writecommand(0b00000110);
     4f8:	86 e0       	ldi	r24, 0x06	; 6
     4fa:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
	//Display mode set
	LCD_u8Writecommand(0b00001100);
     4fe:	8c e0       	ldi	r24, 0x0C	; 12
     500:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
	//end initialization
}
     504:	2c 96       	adiw	r28, 0x0c	; 12
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	cf 91       	pop	r28
     512:	df 91       	pop	r29
     514:	08 95       	ret

00000516 <LCD_u8GotoXY>:
/*comment!:goto specific position on the screen*/
extern u8 LCD_u8GotoXY(u8 Copy_u8XPosition, u8 Copy_u8YPosition) {
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	00 d0       	rcall	.+0      	; 0x51c <LCD_u8GotoXY+0x6>
     51c:	00 d0       	rcall	.+0      	; 0x51e <LCD_u8GotoXY+0x8>
     51e:	0f 92       	push	r0
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	8c 83       	std	Y+4, r24	; 0x04
     526:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_u8OperationStatus = ok;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	89 83       	std	Y+1, r24	; 0x01
	u8 local_u8firstAddress[2] = {0x80,0xC0};
     52c:	80 e8       	ldi	r24, 0x80	; 128
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	80 ec       	ldi	r24, 0xC0	; 192
     532:	8b 83       	std	Y+3, r24	; 0x03

	LCD_u8Writecommand(local_u8firstAddress[Copy_u8XPosition-1] + Copy_u8YPosition-1);
     534:	8c 81       	ldd	r24, Y+4	; 0x04
     536:	88 2f       	mov	r24, r24
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	9c 01       	movw	r18, r24
     53c:	21 50       	subi	r18, 0x01	; 1
     53e:	30 40       	sbci	r19, 0x00	; 0
     540:	ce 01       	movw	r24, r28
     542:	02 96       	adiw	r24, 0x02	; 2
     544:	fc 01       	movw	r30, r24
     546:	e2 0f       	add	r30, r18
     548:	f3 1f       	adc	r31, r19
     54a:	90 81       	ld	r25, Z
     54c:	8d 81       	ldd	r24, Y+5	; 0x05
     54e:	89 0f       	add	r24, r25
     550:	81 50       	subi	r24, 0x01	; 1
     552:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>

	return local_u8OperationStatus;
     556:	89 81       	ldd	r24, Y+1	; 0x01

}
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <lCD_u8CLRScreen>:

/*comment!:clr the screen */
extern u8 lCD_u8CLRScreen(void) {
     568:	df 93       	push	r29
     56a:	cf 93       	push	r28
     56c:	0f 92       	push	r0
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8OperationStatus = ok;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	89 83       	std	Y+1, r24	; 0x01
	//SENDING an command to clr the screen
	local_u8OperationStatus = LCD_u8Writecommand(LCD_CLRSCREEN);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
     57c:	89 83       	std	Y+1, r24	; 0x01
	//put the cursor at the fiirst line
	local_u8OperationStatus = 1;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	89 83       	std	Y+1, r24	; 0x01
	return local_u8OperationStatus;
     582:	89 81       	ldd	r24, Y+1	; 0x01

}
     584:	0f 90       	pop	r0
     586:	cf 91       	pop	r28
     588:	df 91       	pop	r29
     58a:	08 95       	ret

0000058c <LCD_arabicmode>:

/*comment!:setting the mode to arabic mode*/
void LCD_arabicmode()
{	LCD_u8Writecommand(0b00000100);
     58c:	df 93       	push	r29
     58e:	cf 93       	push	r28
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
}
     59a:	cf 91       	pop	r28
     59c:	df 91       	pop	r29
     59e:	08 95       	ret

000005a0 <LCD_englishmode>:

/*comment!:setting the mode to english mode*/
void LCD_englishmode()
{	LCD_u8Writecommand(0b00000110);
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	86 e0       	ldi	r24, 0x06	; 6
     5aa:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
}
     5ae:	cf 91       	pop	r28
     5b0:	df 91       	pop	r29
     5b2:	08 95       	ret

000005b4 <LCD_voidUploadCustomChar>:


void LCD_voidUploadCustomChar(u8 copy_u8location, u8 *copy_u8character)

{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <LCD_voidUploadCustomChar+0x6>
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <LCD_voidUploadCustomChar+0x8>
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	8a 83       	std	Y+2, r24	; 0x02
     5c2:	7c 83       	std	Y+4, r23	; 0x04
     5c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (copy_u8location < 8) {
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	88 30       	cpi	r24, 0x08	; 8
     5ca:	f8 f4       	brcc	.+62     	; 0x60a <LCD_voidUploadCustomChar+0x56>
		LCD_u8Writecommand(LCD_u8FIRSTPLACEINCGMEM + (copy_u8location * 8));
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	88 2f       	mov	r24, r24
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	08 96       	adiw	r24, 0x08	; 8
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	0e 94 88 01 	call	0x310	; 0x310 <LCD_u8Writecommand>
		for (local_u8ArrayIndex = 0; local_u8ArrayIndex < 8; local_u8ArrayIndex++) {
     5e4:	19 82       	std	Y+1, r1	; 0x01
     5e6:	0e c0       	rjmp	.+28     	; 0x604 <LCD_voidUploadCustomChar+0x50>
			LCD_u8WriteData(copy_u8character[local_u8ArrayIndex]);
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	28 2f       	mov	r18, r24
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	9c 81       	ldd	r25, Y+4	; 0x04
     5f2:	fc 01       	movw	r30, r24
     5f4:	e2 0f       	add	r30, r18
     5f6:	f3 1f       	adc	r31, r19
     5f8:	80 81       	ld	r24, Z
     5fa:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_u8WriteData>
{
	u8 local_u8ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (copy_u8location < 8) {
		LCD_u8Writecommand(LCD_u8FIRSTPLACEINCGMEM + (copy_u8location * 8));
		for (local_u8ArrayIndex = 0; local_u8ArrayIndex < 8; local_u8ArrayIndex++) {
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	88 30       	cpi	r24, 0x08	; 8
     608:	78 f3       	brcs	.-34     	; 0x5e8 <LCD_voidUploadCustomChar+0x34>
		}
	} else {
		/* TODO: return Error */
	}

}
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	cf 91       	pop	r28
     614:	df 91       	pop	r29
     616:	08 95       	ret

00000618 <MatrixRotate>:
							 { 0, 0, 0, 0, 0, 0, 0, 0 },
							 { 0, 0, 0, 0, 0, 0, 0, 0 },
							 { 0, 0, 0, 0, 0, 0, 0, 0 },
							 { 0, 0, 0, 0, 0, 0, 0, 0 },
	                         { 0, 0, 0, 0, 0, 0, 0, 0 } };
void MatrixRotate(u8 Copy_u8PtrToMatrix[][2], u8 Copy_u8PtrTonewMatrix[][2]) {
     618:	df 93       	push	r29
     61a:	cf 93       	push	r28
     61c:	00 d0       	rcall	.+0      	; 0x61e <MatrixRotate+0x6>
     61e:	00 d0       	rcall	.+0      	; 0x620 <MatrixRotate+0x8>
     620:	00 d0       	rcall	.+0      	; 0x622 <MatrixRotate+0xa>
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	9c 83       	std	Y+4, r25	; 0x04
     628:	8b 83       	std	Y+3, r24	; 0x03
     62a:	7e 83       	std	Y+6, r23	; 0x06
     62c:	6d 83       	std	Y+5, r22	; 0x05
	u8 i, j;
	for (i = 0; i < 2; ++i) {
     62e:	1a 82       	std	Y+2, r1	; 0x02
     630:	32 c0       	rjmp	.+100    	; 0x696 <MatrixRotate+0x7e>
		for (j = 0; j < 2; ++j) {
     632:	19 82       	std	Y+1, r1	; 0x01
     634:	2a c0       	rjmp	.+84     	; 0x68a <MatrixRotate+0x72>
			Copy_u8PtrTonewMatrix[i][j] = Copy_u8PtrToMatrix[2 - j - 1][i];
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	88 2f       	mov	r24, r24
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	9c 01       	movw	r18, r24
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	8d 81       	ldd	r24, Y+5	; 0x05
     644:	9e 81       	ldd	r25, Y+6	; 0x06
     646:	ac 01       	movw	r20, r24
     648:	42 0f       	add	r20, r18
     64a:	53 1f       	adc	r21, r19
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	68 2f       	mov	r22, r24
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	28 2f       	mov	r18, r24
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	82 1b       	sub	r24, r18
     65e:	93 0b       	sbc	r25, r19
     660:	9c 01       	movw	r18, r24
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	9c 81       	ldd	r25, Y+4	; 0x04
     66a:	28 0f       	add	r18, r24
     66c:	39 1f       	adc	r19, r25
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	e8 0f       	add	r30, r24
     678:	f9 1f       	adc	r31, r25
     67a:	80 81       	ld	r24, Z
     67c:	fa 01       	movw	r30, r20
     67e:	e6 0f       	add	r30, r22
     680:	f7 1f       	adc	r31, r23
     682:	80 83       	st	Z, r24
							 { 0, 0, 0, 0, 0, 0, 0, 0 },
	                         { 0, 0, 0, 0, 0, 0, 0, 0 } };
void MatrixRotate(u8 Copy_u8PtrToMatrix[][2], u8 Copy_u8PtrTonewMatrix[][2]) {
	u8 i, j;
	for (i = 0; i < 2; ++i) {
		for (j = 0; j < 2; ++j) {
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	98 f2       	brcs	.-90     	; 0x636 <MatrixRotate+0x1e>
							 { 0, 0, 0, 0, 0, 0, 0, 0 },
							 { 0, 0, 0, 0, 0, 0, 0, 0 },
	                         { 0, 0, 0, 0, 0, 0, 0, 0 } };
void MatrixRotate(u8 Copy_u8PtrToMatrix[][2], u8 Copy_u8PtrTonewMatrix[][2]) {
	u8 i, j;
	for (i = 0; i < 2; ++i) {
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	8a 83       	std	Y+2, r24	; 0x02
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	82 30       	cpi	r24, 0x02	; 2
     69a:	58 f2       	brcs	.-106    	; 0x632 <MatrixRotate+0x1a>
		for (j = 0; j < 2; ++j) {
			Copy_u8PtrTonewMatrix[i][j] = Copy_u8PtrToMatrix[2 - j - 1][i];
		}
	}
}
     69c:	26 96       	adiw	r28, 0x06	; 6
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	cf 91       	pop	r28
     6aa:	df 91       	pop	r29
     6ac:	08 95       	ret

000006ae <MatrixEquality>:



void MatrixEquality(u8 Copy_u8PtrToMatrix[][2], u8 Copy_u8PtrTonewMatrix[][2])
{
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <MatrixEquality+0x6>
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <MatrixEquality+0x8>
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <MatrixEquality+0xa>
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	9c 83       	std	Y+4, r25	; 0x04
     6be:	8b 83       	std	Y+3, r24	; 0x03
     6c0:	7e 83       	std	Y+6, r23	; 0x06
     6c2:	6d 83       	std	Y+5, r22	; 0x05
	u8 i, j;
		for (i = 0; i < 2; ++i) {
     6c4:	1a 82       	std	Y+2, r1	; 0x02
     6c6:	2e c0       	rjmp	.+92     	; 0x724 <MatrixEquality+0x76>
			for (j = 0; j < 2; ++j) {
     6c8:	19 82       	std	Y+1, r1	; 0x01
     6ca:	26 c0       	rjmp	.+76     	; 0x718 <MatrixEquality+0x6a>
				Copy_u8PtrToMatrix	[i][j] = Copy_u8PtrTonewMatrix[i][j];
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	88 2f       	mov	r24, r24
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	9c 01       	movw	r18, r24
     6d4:	22 0f       	add	r18, r18
     6d6:	33 1f       	adc	r19, r19
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	bc 01       	movw	r22, r24
     6de:	62 0f       	add	r22, r18
     6e0:	73 1f       	adc	r23, r19
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	48 2f       	mov	r20, r24
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	9c 01       	movw	r18, r24
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	8d 81       	ldd	r24, Y+5	; 0x05
     6f6:	9e 81       	ldd	r25, Y+6	; 0x06
     6f8:	28 0f       	add	r18, r24
     6fa:	39 1f       	adc	r19, r25
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	e8 0f       	add	r30, r24
     706:	f9 1f       	adc	r31, r25
     708:	80 81       	ld	r24, Z
     70a:	fb 01       	movw	r30, r22
     70c:	e4 0f       	add	r30, r20
     70e:	f5 1f       	adc	r31, r21
     710:	80 83       	st	Z, r24

void MatrixEquality(u8 Copy_u8PtrToMatrix[][2], u8 Copy_u8PtrTonewMatrix[][2])
{
	u8 i, j;
		for (i = 0; i < 2; ++i) {
			for (j = 0; j < 2; ++j) {
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	b8 f2       	brcs	.-82     	; 0x6cc <MatrixEquality+0x1e>


void MatrixEquality(u8 Copy_u8PtrToMatrix[][2], u8 Copy_u8PtrTonewMatrix[][2])
{
	u8 i, j;
		for (i = 0; i < 2; ++i) {
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	8a 83       	std	Y+2, r24	; 0x02
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	78 f2       	brcs	.-98     	; 0x6c8 <MatrixEquality+0x1a>
			for (j = 0; j < 2; ++j) {
				Copy_u8PtrToMatrix	[i][j] = Copy_u8PtrTonewMatrix[i][j];
			}
		}

}
     72a:	26 96       	adiw	r28, 0x06	; 6
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	cf 91       	pop	r28
     738:	df 91       	pop	r29
     73a:	08 95       	ret

0000073c <MatrixRotateInTheSameMatrix>:

void MatrixRotateInTheSameMatrix(u8 Copy_u8PtrToMatrix[][2] ) {
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	28 97       	sbiw	r28, 0x08	; 8
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	98 87       	std	Y+8, r25	; 0x08
     752:	8f 83       	std	Y+7, r24	; 0x07
	u8 i, j;
	u8 Copy_u8PtrTonewMatrix[2][2]={{0,0},{0,0}};
     754:	1b 82       	std	Y+3, r1	; 0x03
     756:	1c 82       	std	Y+4, r1	; 0x04
     758:	1d 82       	std	Y+5, r1	; 0x05
     75a:	1e 82       	std	Y+6, r1	; 0x06
	__asm__("CLI");
     75c:	f8 94       	cli
	for (i = 0; i < 2; ++i) {
     75e:	1a 82       	std	Y+2, r1	; 0x02
     760:	32 c0       	rjmp	.+100    	; 0x7c6 <MatrixRotateInTheSameMatrix+0x8a>
		for (j = 0; j < 2; ++j) {
     762:	19 82       	std	Y+1, r1	; 0x01
     764:	2a c0       	rjmp	.+84     	; 0x7ba <MatrixRotateInTheSameMatrix+0x7e>
			Copy_u8PtrTonewMatrix[i][j] = Copy_u8PtrToMatrix[2 - j - 1][i];
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	48 2f       	mov	r20, r24
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	68 2f       	mov	r22, r24
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	28 2f       	mov	r18, r24
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	82 1b       	sub	r24, r18
     77e:	93 0b       	sbc	r25, r19
     780:	9c 01       	movw	r18, r24
     782:	22 0f       	add	r18, r18
     784:	33 1f       	adc	r19, r19
     786:	8f 81       	ldd	r24, Y+7	; 0x07
     788:	98 85       	ldd	r25, Y+8	; 0x08
     78a:	28 0f       	add	r18, r24
     78c:	39 1f       	adc	r19, r25
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	e8 0f       	add	r30, r24
     798:	f9 1f       	adc	r31, r25
     79a:	a0 81       	ld	r26, Z
     79c:	9a 01       	movw	r18, r20
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	82 0f       	add	r24, r18
     7a8:	93 1f       	adc	r25, r19
     7aa:	86 0f       	add	r24, r22
     7ac:	97 1f       	adc	r25, r23
     7ae:	fc 01       	movw	r30, r24
     7b0:	32 96       	adiw	r30, 0x02	; 2
     7b2:	a0 83       	st	Z, r26
void MatrixRotateInTheSameMatrix(u8 Copy_u8PtrToMatrix[][2] ) {
	u8 i, j;
	u8 Copy_u8PtrTonewMatrix[2][2]={{0,0},{0,0}};
	__asm__("CLI");
	for (i = 0; i < 2; ++i) {
		for (j = 0; j < 2; ++j) {
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	89 83       	std	Y+1, r24	; 0x01
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	98 f2       	brcs	.-90     	; 0x766 <MatrixRotateInTheSameMatrix+0x2a>

void MatrixRotateInTheSameMatrix(u8 Copy_u8PtrToMatrix[][2] ) {
	u8 i, j;
	u8 Copy_u8PtrTonewMatrix[2][2]={{0,0},{0,0}};
	__asm__("CLI");
	for (i = 0; i < 2; ++i) {
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	8a 83       	std	Y+2, r24	; 0x02
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	58 f2       	brcs	.-106    	; 0x762 <MatrixRotateInTheSameMatrix+0x26>
		for (j = 0; j < 2; ++j) {
			Copy_u8PtrTonewMatrix[i][j] = Copy_u8PtrToMatrix[2 - j - 1][i];
		}
	}

	MatrixEquality(Copy_u8PtrToMatrix,Copy_u8PtrTonewMatrix);
     7cc:	8f 81       	ldd	r24, Y+7	; 0x07
     7ce:	98 85       	ldd	r25, Y+8	; 0x08
     7d0:	9e 01       	movw	r18, r28
     7d2:	2d 5f       	subi	r18, 0xFD	; 253
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	b9 01       	movw	r22, r18
     7d8:	0e 94 57 03 	call	0x6ae	; 0x6ae <MatrixEquality>
	__asm__("SEI");
     7dc:	78 94       	sei
}
     7de:	28 96       	adiw	r28, 0x08	; 8
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	cf 91       	pop	r28
     7ec:	df 91       	pop	r29
     7ee:	08 95       	ret

000007f0 <MatrixAdditionAtXY>:
 *      (X,Y )
 *
 * */


void MatrixAdditionAtXY(u8 Copy_u8PtrToMatrix[][2],u8 copy_u8XPosition,u8 copy_u8YPosition) {
     7f0:	df 93       	push	r29
     7f2:	cf 93       	push	r28
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <MatrixAdditionAtXY+0x6>
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <MatrixAdditionAtXY+0x8>
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <MatrixAdditionAtXY+0xa>
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	8b 83       	std	Y+3, r24	; 0x03
     802:	6d 83       	std	Y+5, r22	; 0x05
     804:	4e 83       	std	Y+6, r20	; 0x06
	u8 localx_u8counter=0;
     806:	1a 82       	std	Y+2, r1	; 0x02
	u8 localy_u8counter=0;
     808:	19 82       	std	Y+1, r1	; 0x01
	//initializing the DotMatrix to zero
	//if(x>)
	for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
     80a:	1a 82       	std	Y+2, r1	; 0x02
     80c:	1e c0       	rjmp	.+60     	; 0x84a <MatrixAdditionAtXY+0x5a>
	{
		for(localy_u8counter=0;localy_u8counter<8;localy_u8counter++)
     80e:	19 82       	std	Y+1, r1	; 0x01
     810:	16 c0       	rjmp	.+44     	; 0x83e <MatrixAdditionAtXY+0x4e>
			{
//TODO dot matrix repalcment
			movingpart[localx_u8counter][localy_u8counter]=0;
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	48 2f       	mov	r20, r24
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	28 2f       	mov	r18, r24
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	ca 01       	movw	r24, r20
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	82 0f       	add	r24, r18
     82e:	93 1f       	adc	r25, r19
     830:	fc 01       	movw	r30, r24
     832:	e7 52       	subi	r30, 0x27	; 39
     834:	ff 4f       	sbci	r31, 0xFF	; 255
     836:	10 82       	st	Z, r1
	u8 localy_u8counter=0;
	//initializing the DotMatrix to zero
	//if(x>)
	for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
	{
		for(localy_u8counter=0;localy_u8counter<8;localy_u8counter++)
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	88 30       	cpi	r24, 0x08	; 8
     842:	38 f3       	brcs	.-50     	; 0x812 <MatrixAdditionAtXY+0x22>
void MatrixAdditionAtXY(u8 Copy_u8PtrToMatrix[][2],u8 copy_u8XPosition,u8 copy_u8YPosition) {
	u8 localx_u8counter=0;
	u8 localy_u8counter=0;
	//initializing the DotMatrix to zero
	//if(x>)
	for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
     844:	8a 81       	ldd	r24, Y+2	; 0x02
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	8a 83       	std	Y+2, r24	; 0x02
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	88 30       	cpi	r24, 0x08	; 8
     84e:	f8 f2       	brcs	.-66     	; 0x80e <MatrixAdditionAtXY+0x1e>
// the range of the  copy_u8XPosition & copy_u8YPosition is from  1:8
//	if((copy_u8XPosition<=8) && (copy_u8YPosition<=8))
//	{
		// the range of the  copy_u8XPosition & copy_u8YPosition is from  1:8
		/// i need to make it from 0 to 7
	copy_u8XPosition--;
     850:	8d 81       	ldd	r24, Y+5	; 0x05
     852:	81 50       	subi	r24, 0x01	; 1
     854:	8d 83       	std	Y+5, r24	; 0x05
	copy_u8YPosition--;
     856:	8e 81       	ldd	r24, Y+6	; 0x06
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	8e 83       	std	Y+6, r24	; 0x06
	movingpart[copy_u8XPosition]  [copy_u8YPosition]		+=  Copy_u8PtrToMatrix[1][0];
     85c:	8d 81       	ldd	r24, Y+5	; 0x05
     85e:	68 2f       	mov	r22, r24
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	8e 81       	ldd	r24, Y+6	; 0x06
     864:	a8 2f       	mov	r26, r24
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	8d 81       	ldd	r24, Y+5	; 0x05
     86a:	48 2f       	mov	r20, r24
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	8e 81       	ldd	r24, Y+6	; 0x06
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	ca 01       	movw	r24, r20
     876:	88 0f       	add	r24, r24
     878:	99 1f       	adc	r25, r25
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	fc 01       	movw	r30, r24
     888:	e7 52       	subi	r30, 0x27	; 39
     88a:	ff 4f       	sbci	r31, 0xFF	; 255
     88c:	20 81       	ld	r18, Z
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	9c 81       	ldd	r25, Y+4	; 0x04
     892:	fc 01       	movw	r30, r24
     894:	32 96       	adiw	r30, 0x02	; 2
     896:	80 81       	ld	r24, Z
     898:	28 0f       	add	r18, r24
     89a:	cb 01       	movw	r24, r22
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	8a 0f       	add	r24, r26
     8aa:	9b 1f       	adc	r25, r27
     8ac:	fc 01       	movw	r30, r24
     8ae:	e7 52       	subi	r30, 0x27	; 39
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	20 83       	st	Z, r18
	movingpart[copy_u8XPosition-1][copy_u8YPosition]	 	+= 	Copy_u8PtrToMatrix[0][0];
     8b4:	8d 81       	ldd	r24, Y+5	; 0x05
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	bc 01       	movw	r22, r24
     8bc:	61 50       	subi	r22, 0x01	; 1
     8be:	70 40       	sbci	r23, 0x00	; 0
     8c0:	8e 81       	ldd	r24, Y+6	; 0x06
     8c2:	a8 2f       	mov	r26, r24
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	8d 81       	ldd	r24, Y+5	; 0x05
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	ac 01       	movw	r20, r24
     8ce:	41 50       	subi	r20, 0x01	; 1
     8d0:	50 40       	sbci	r21, 0x00	; 0
     8d2:	8e 81       	ldd	r24, Y+6	; 0x06
     8d4:	28 2f       	mov	r18, r24
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	ca 01       	movw	r24, r20
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	82 0f       	add	r24, r18
     8e8:	93 1f       	adc	r25, r19
     8ea:	fc 01       	movw	r30, r24
     8ec:	e7 52       	subi	r30, 0x27	; 39
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	90 81       	ld	r25, Z
     8f2:	eb 81       	ldd	r30, Y+3	; 0x03
     8f4:	fc 81       	ldd	r31, Y+4	; 0x04
     8f6:	80 81       	ld	r24, Z
     8f8:	29 2f       	mov	r18, r25
     8fa:	28 0f       	add	r18, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	8a 0f       	add	r24, r26
     90c:	9b 1f       	adc	r25, r27
     90e:	fc 01       	movw	r30, r24
     910:	e7 52       	subi	r30, 0x27	; 39
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	20 83       	st	Z, r18
	movingpart[copy_u8XPosition]  [copy_u8YPosition+1] 		+= 	Copy_u8PtrToMatrix[1][1];
     916:	8d 81       	ldd	r24, Y+5	; 0x05
     918:	68 2f       	mov	r22, r24
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	8e 81       	ldd	r24, Y+6	; 0x06
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	dc 01       	movw	r26, r24
     924:	11 96       	adiw	r26, 0x01	; 1
     926:	8d 81       	ldd	r24, Y+5	; 0x05
     928:	48 2f       	mov	r20, r24
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	8e 81       	ldd	r24, Y+6	; 0x06
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	9c 01       	movw	r18, r24
     934:	2f 5f       	subi	r18, 0xFF	; 255
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	ca 01       	movw	r24, r20
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	82 0f       	add	r24, r18
     948:	93 1f       	adc	r25, r19
     94a:	fc 01       	movw	r30, r24
     94c:	e7 52       	subi	r30, 0x27	; 39
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	20 81       	ld	r18, Z
     952:	8b 81       	ldd	r24, Y+3	; 0x03
     954:	9c 81       	ldd	r25, Y+4	; 0x04
     956:	fc 01       	movw	r30, r24
     958:	32 96       	adiw	r30, 0x02	; 2
     95a:	81 81       	ldd	r24, Z+1	; 0x01
     95c:	28 0f       	add	r18, r24
     95e:	cb 01       	movw	r24, r22
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	8a 0f       	add	r24, r26
     96e:	9b 1f       	adc	r25, r27
     970:	fc 01       	movw	r30, r24
     972:	e7 52       	subi	r30, 0x27	; 39
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	20 83       	st	Z, r18
	movingpart[copy_u8XPosition-1][copy_u8YPosition+1] 		+=	Copy_u8PtrToMatrix[0][1];
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	88 2f       	mov	r24, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	bc 01       	movw	r22, r24
     980:	61 50       	subi	r22, 0x01	; 1
     982:	70 40       	sbci	r23, 0x00	; 0
     984:	8e 81       	ldd	r24, Y+6	; 0x06
     986:	88 2f       	mov	r24, r24
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	dc 01       	movw	r26, r24
     98c:	11 96       	adiw	r26, 0x01	; 1
     98e:	8d 81       	ldd	r24, Y+5	; 0x05
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	ac 01       	movw	r20, r24
     996:	41 50       	subi	r20, 0x01	; 1
     998:	50 40       	sbci	r21, 0x00	; 0
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 2f       	mov	r24, r24
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9c 01       	movw	r18, r24
     9a2:	2f 5f       	subi	r18, 0xFF	; 255
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	ca 01       	movw	r24, r20
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	82 0f       	add	r24, r18
     9b6:	93 1f       	adc	r25, r19
     9b8:	fc 01       	movw	r30, r24
     9ba:	e7 52       	subi	r30, 0x27	; 39
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	90 81       	ld	r25, Z
     9c0:	eb 81       	ldd	r30, Y+3	; 0x03
     9c2:	fc 81       	ldd	r31, Y+4	; 0x04
     9c4:	81 81       	ldd	r24, Z+1	; 0x01
     9c6:	29 2f       	mov	r18, r25
     9c8:	28 0f       	add	r18, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	8a 0f       	add	r24, r26
     9da:	9b 1f       	adc	r25, r27
     9dc:	fc 01       	movw	r30, r24
     9de:	e7 52       	subi	r30, 0x27	; 39
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	20 83       	st	Z, r18
//	}
//	else
//	{
//
//	}
}
     9e4:	26 96       	adiw	r28, 0x06	; 6
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	cf 91       	pop	r28
     9f2:	df 91       	pop	r29
     9f4:	08 95       	ret

000009f6 <MatrixAddition>:

void MatrixAddition(u8 Copy_u8PtrToMatrix[][2]) {
     9f6:	df 93       	push	r29
     9f8:	cf 93       	push	r28
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <MatrixAddition+0x6>
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	9a 83       	std	Y+2, r25	; 0x02
     a02:	89 83       	std	Y+1, r24	; 0x01


	DotMatrix[0][3] = Copy_u8PtrToMatrix[0][0];
     a04:	e9 81       	ldd	r30, Y+1	; 0x01
     a06:	fa 81       	ldd	r31, Y+2	; 0x02
     a08:	80 81       	ld	r24, Z
     a0a:	80 93 1c 01 	sts	0x011C, r24
	DotMatrix[0][4] = Copy_u8PtrToMatrix[0][1];
     a0e:	e9 81       	ldd	r30, Y+1	; 0x01
     a10:	fa 81       	ldd	r31, Y+2	; 0x02
     a12:	81 81       	ldd	r24, Z+1	; 0x01
     a14:	80 93 1d 01 	sts	0x011D, r24
	DotMatrix[1][3] = Copy_u8PtrToMatrix[1][0];
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	fc 01       	movw	r30, r24
     a1e:	32 96       	adiw	r30, 0x02	; 2
     a20:	80 81       	ld	r24, Z
     a22:	80 93 24 01 	sts	0x0124, r24
	DotMatrix[1][4] = Copy_u8PtrToMatrix[1][1];
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	fc 01       	movw	r30, r24
     a2c:	32 96       	adiw	r30, 0x02	; 2
     a2e:	81 81       	ldd	r24, Z+1	; 0x01
     a30:	80 93 25 01 	sts	0x0125, r24

}
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	08 95       	ret

00000a3e <MatrixFlow>:

void MatrixFlow(void) {
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	00 d0       	rcall	.+0      	; 0xa44 <MatrixFlow+0x6>
     a44:	0f 92       	push	r0
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
	u8 btn=1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	89 83       	std	Y+1, r24	; 0x01
	static u8 counter=0;
	static u8 reault1=0;
	static u8 reault2=0;
	switch (btn) {
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	28 2f       	mov	r18, r24
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	3b 83       	std	Y+3, r19	; 0x03
     a56:	2a 83       	std	Y+2, r18	; 0x02
     a58:	8a 81       	ldd	r24, Y+2	; 0x02
     a5a:	9b 81       	ldd	r25, Y+3	; 0x03
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	09 f4       	brne	.+2      	; 0xa62 <MatrixFlow+0x24>
     a60:	bc c0       	rjmp	.+376    	; 0xbda <MatrixFlow+0x19c>
     a62:	2a 81       	ldd	r18, Y+2	; 0x02
     a64:	3b 81       	ldd	r19, Y+3	; 0x03
     a66:	21 30       	cpi	r18, 0x01	; 1
     a68:	31 05       	cpc	r19, r1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <MatrixFlow+0x30>
     a6c:	b6 c0       	rjmp	.+364    	; 0xbda <MatrixFlow+0x19c>
			break;
			case 1:

				//for (counter = 0; counter < 8; counter++)

					counter++;
     a6e:	80 91 5b 01 	lds	r24, 0x015B
     a72:	8f 5f       	subi	r24, 0xFF	; 255
     a74:	80 93 5b 01 	sts	0x015B, r24
					reault1=DotMatrix[counter + 1][3] + DotMatrix[counter][3];
     a78:	80 91 5b 01 	lds	r24, 0x015B
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	fc 01       	movw	r30, r24
     a90:	e4 5e       	subi	r30, 0xE4	; 228
     a92:	fe 4f       	sbci	r31, 0xFE	; 254
     a94:	20 81       	ld	r18, Z
     a96:	80 91 5b 01 	lds	r24, 0x015B
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	fc 01       	movw	r30, r24
     aac:	e4 5e       	subi	r30, 0xE4	; 228
     aae:	fe 4f       	sbci	r31, 0xFE	; 254
     ab0:	80 81       	ld	r24, Z
     ab2:	82 0f       	add	r24, r18
     ab4:	80 93 5a 01 	sts	0x015A, r24
					reault2=DotMatrix[counter + 1][4] +  DotMatrix[counter][4];
     ab8:	80 91 5b 01 	lds	r24, 0x015B
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	fc 01       	movw	r30, r24
     ad2:	e7 5e       	subi	r30, 0xE7	; 231
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	20 81       	ld	r18, Z
     ad8:	80 91 5b 01 	lds	r24, 0x015B
     adc:	88 2f       	mov	r24, r24
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	fc 01       	movw	r30, r24
     af0:	e7 5e       	subi	r30, 0xE7	; 231
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	80 81       	ld	r24, Z
     af6:	82 0f       	add	r24, r18
     af8:	80 93 59 01 	sts	0x0159, r24
					if (reault1>1 || reault2>1){
     afc:	80 91 5a 01 	lds	r24, 0x015A
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	08 f0       	brcs	.+2      	; 0xb06 <MatrixFlow+0xc8>
     b04:	6a c0       	rjmp	.+212    	; 0xbda <MatrixFlow+0x19c>
     b06:	80 91 59 01 	lds	r24, 0x0159
     b0a:	82 30       	cpi	r24, 0x02	; 2
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <MatrixFlow+0xd2>
     b0e:	65 c0       	rjmp	.+202    	; 0xbda <MatrixFlow+0x19c>
						break;
					}
					else{
						DotMatrix[counter + 1][3] =DotMatrix[counter][3];
     b10:	80 91 5b 01 	lds	r24, 0x015B
     b14:	88 2f       	mov	r24, r24
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	9c 01       	movw	r18, r24
     b1a:	2f 5f       	subi	r18, 0xFF	; 255
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	80 91 5b 01 	lds	r24, 0x015B
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	fc 01       	movw	r30, r24
     b34:	e4 5e       	subi	r30, 0xE4	; 228
     b36:	fe 4f       	sbci	r31, 0xFE	; 254
     b38:	40 81       	ld	r20, Z
     b3a:	c9 01       	movw	r24, r18
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	fc 01       	movw	r30, r24
     b4a:	e4 5e       	subi	r30, 0xE4	; 228
     b4c:	fe 4f       	sbci	r31, 0xFE	; 254
     b4e:	40 83       	st	Z, r20
						DotMatrix[counter + 1][4]= DotMatrix[counter][4];
     b50:	80 91 5b 01 	lds	r24, 0x015B
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9c 01       	movw	r18, r24
     b5a:	2f 5f       	subi	r18, 0xFF	; 255
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
     b5e:	80 91 5b 01 	lds	r24, 0x015B
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	fc 01       	movw	r30, r24
     b76:	e7 5e       	subi	r30, 0xE7	; 231
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	40 81       	ld	r20, Z
     b7c:	c9 01       	movw	r24, r18
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	fc 01       	movw	r30, r24
     b8e:	e7 5e       	subi	r30, 0xE7	; 231
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	40 83       	st	Z, r20
						DotMatrix[counter][3] = 0;
     b94:	80 91 5b 01 	lds	r24, 0x015B
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 5e       	subi	r30, 0xE4	; 228
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	10 82       	st	Z, r1
						DotMatrix[counter][4] = 0;
     bb0:	80 91 5b 01 	lds	r24, 0x015B
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	fc 01       	movw	r30, r24
     bc8:	e7 5e       	subi	r30, 0xE7	; 231
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	10 82       	st	Z, r1
					}

				if(counter==7)
     bce:	80 91 5b 01 	lds	r24, 0x015B
     bd2:	87 30       	cpi	r24, 0x07	; 7
     bd4:	11 f4       	brne	.+4      	; 0xbda <MatrixFlow+0x19c>
				{
					counter=0;
     bd6:	10 92 5b 01 	sts	0x015B, r1

				}

				break;
	}
}
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <addingThebackgroundTotheMovingPart>:



void addingThebackgroundTotheMovingPart() {
     be6:	1f 93       	push	r17
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <addingThebackgroundTotheMovingPart+0x8>
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	u8 localx_u8counter=0;
     bf2:	1a 82       	std	Y+2, r1	; 0x02
	u8 localy_u8counter=0;
     bf4:	19 82       	std	Y+1, r1	; 0x01

	//initializing the DotMatrix to zero
	//if(x>)
	for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
     bf6:	1a 82       	std	Y+2, r1	; 0x02
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <addingThebackgroundTotheMovingPart+0xa2>
	{
		for(localy_u8counter=0;localy_u8counter<8;localy_u8counter++)
     bfa:	19 82       	std	Y+1, r1	; 0x01
     bfc:	3e c0       	rjmp	.+124    	; 0xc7a <addingThebackgroundTotheMovingPart+0x94>
			{

			DotMatrix[localx_u8counter][localy_u8counter]=movingpart[localx_u8counter][localy_u8counter]+background[localx_u8counter][localy_u8counter];
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	a8 2f       	mov	r26, r24
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	48 2f       	mov	r20, r24
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	ca 01       	movw	r24, r20
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	82 0f       	add	r24, r18
     c26:	93 1f       	adc	r25, r19
     c28:	fc 01       	movw	r30, r24
     c2a:	e7 52       	subi	r30, 0x27	; 39
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	10 81       	ld	r17, Z
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	48 2f       	mov	r20, r24
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	ca 01       	movw	r24, r20
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	82 0f       	add	r24, r18
     c4c:	93 1f       	adc	r25, r19
     c4e:	fc 01       	movw	r30, r24
     c50:	e7 56       	subi	r30, 0x67	; 103
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	80 81       	ld	r24, Z
     c56:	21 2f       	mov	r18, r17
     c58:	28 0f       	add	r18, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	8a 0f       	add	r24, r26
     c6a:	9b 1f       	adc	r25, r27
     c6c:	fc 01       	movw	r30, r24
     c6e:	e7 5e       	subi	r30, 0xE7	; 231
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	20 83       	st	Z, r18

	//initializing the DotMatrix to zero
	//if(x>)
	for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
	{
		for(localy_u8counter=0;localy_u8counter<8;localy_u8counter++)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	8f 5f       	subi	r24, 0xFF	; 255
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	88 30       	cpi	r24, 0x08	; 8
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <addingThebackgroundTotheMovingPart+0x9c>
     c80:	be cf       	rjmp	.-132    	; 0xbfe <addingThebackgroundTotheMovingPart+0x18>
	u8 localx_u8counter=0;
	u8 localy_u8counter=0;

	//initializing the DotMatrix to zero
	//if(x>)
	for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	8f 5f       	subi	r24, 0xFF	; 255
     c86:	8a 83       	std	Y+2, r24	; 0x02
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	88 30       	cpi	r24, 0x08	; 8
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <addingThebackgroundTotheMovingPart+0xaa>
     c8e:	b5 cf       	rjmp	.-150    	; 0xbfa <addingThebackgroundTotheMovingPart+0x14>

			DotMatrix[localx_u8counter][localy_u8counter]=movingpart[localx_u8counter][localy_u8counter]+background[localx_u8counter][localy_u8counter];
			}

	}
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <updateThebackground>:

void updateThebackground(void)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <updateThebackground+0x6>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	u8 localx_u8counter=0;
     ca6:	1a 82       	std	Y+2, r1	; 0x02
		u8 localy_u8counter=0;
     ca8:	19 82       	std	Y+1, r1	; 0x01

		//initializing the DotMatrix to zero
		//if(x>)
		for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
     caa:	1a 82       	std	Y+2, r1	; 0x02
     cac:	31 c0       	rjmp	.+98     	; 0xd10 <updateThebackground+0x74>
		{
			for(localy_u8counter=0;localy_u8counter<8;localy_u8counter++)
     cae:	19 82       	std	Y+1, r1	; 0x01
     cb0:	29 c0       	rjmp	.+82     	; 0xd04 <updateThebackground+0x68>
				{

				background[localx_u8counter][localy_u8counter]=DotMatrix[localx_u8counter][localy_u8counter];
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	a8 2f       	mov	r26, r24
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	68 2f       	mov	r22, r24
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	48 2f       	mov	r20, r24
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	ca 01       	movw	r24, r20
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	82 0f       	add	r24, r18
     cda:	93 1f       	adc	r25, r19
     cdc:	fc 01       	movw	r30, r24
     cde:	e7 5e       	subi	r30, 0xE7	; 231
     ce0:	fe 4f       	sbci	r31, 0xFE	; 254
     ce2:	20 81       	ld	r18, Z
     ce4:	cd 01       	movw	r24, r26
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	86 0f       	add	r24, r22
     cf4:	97 1f       	adc	r25, r23
     cf6:	fc 01       	movw	r30, r24
     cf8:	e7 56       	subi	r30, 0x67	; 103
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	20 83       	st	Z, r18

		//initializing the DotMatrix to zero
		//if(x>)
		for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
		{
			for(localy_u8counter=0;localy_u8counter<8;localy_u8counter++)
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 30       	cpi	r24, 0x08	; 8
     d08:	a0 f2       	brcs	.-88     	; 0xcb2 <updateThebackground+0x16>
	u8 localx_u8counter=0;
		u8 localy_u8counter=0;

		//initializing the DotMatrix to zero
		//if(x>)
		for(localx_u8counter=0;localx_u8counter<8;localx_u8counter++)
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	8a 83       	std	Y+2, r24	; 0x02
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	88 30       	cpi	r24, 0x08	; 8
     d14:	60 f2       	brcs	.-104    	; 0xcae <updateThebackground+0x12>
				background[localx_u8counter][localy_u8counter]=DotMatrix[localx_u8counter][localy_u8counter];
				}

		}

}
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <check4collisioion>:


void check4collisioion(u8 *local_u8collisionflag) {
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	c4 54       	subi	r28, 0x44	; 68
     d2e:	d0 40       	sbci	r29, 0x00	; 0
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	fe 01       	movw	r30, r28
     d3c:	ed 5b       	subi	r30, 0xBD	; 189
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
	u8 localx_u8counter = 0;
     d44:	1a 82       	std	Y+2, r1	; 0x02
	u8 localy_u8counter = 0;
     d46:	19 82       	std	Y+1, r1	; 0x01
	u8 temp[8][8];
	*local_u8collisionflag = 0;
     d48:	fe 01       	movw	r30, r28
     d4a:	ed 5b       	subi	r30, 0xBD	; 189
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	01 90       	ld	r0, Z+
     d50:	f0 81       	ld	r31, Z
     d52:	e0 2d       	mov	r30, r0
     d54:	10 82       	st	Z, r1

	for (localx_u8counter = 0; localx_u8counter < 8; localx_u8counter++) {
     d56:	1a 82       	std	Y+2, r1	; 0x02
     d58:	4a c0       	rjmp	.+148    	; 0xdee <check4collisioion+0xce>
		for (localy_u8counter = 0; localy_u8counter < 8; localy_u8counter++) {
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	41 c0       	rjmp	.+130    	; 0xde0 <check4collisioion+0xc0>

			temp[localx_u8counter][localy_u8counter] =
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	68 2f       	mov	r22, r24
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	08 2f       	mov	r16, r24
     d68:	10 e0       	ldi	r17, 0x00	; 0
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	48 2f       	mov	r20, r24
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	ca 01       	movw	r24, r20
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	82 0f       	add	r24, r18
     d86:	93 1f       	adc	r25, r19
     d88:	fc 01       	movw	r30, r24
     d8a:	e7 52       	subi	r30, 0x27	; 39
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	a0 81       	ld	r26, Z
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	48 2f       	mov	r20, r24
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	ca 01       	movw	r24, r20
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	82 0f       	add	r24, r18
     dac:	93 1f       	adc	r25, r19
     dae:	fc 01       	movw	r30, r24
     db0:	e7 56       	subi	r30, 0x67	; 103
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	80 81       	ld	r24, Z
     db6:	4a 2f       	mov	r20, r26
     db8:	48 0f       	add	r20, r24
     dba:	9b 01       	movw	r18, r22
     dbc:	22 0f       	add	r18, r18
     dbe:	33 1f       	adc	r19, r19
     dc0:	22 0f       	add	r18, r18
     dc2:	33 1f       	adc	r19, r19
     dc4:	22 0f       	add	r18, r18
     dc6:	33 1f       	adc	r19, r19
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	80 0f       	add	r24, r16
     dd2:	91 1f       	adc	r25, r17
     dd4:	fc 01       	movw	r30, r24
     dd6:	32 96       	adiw	r30, 0x02	; 2
     dd8:	40 83       	st	Z, r20
	u8 localy_u8counter = 0;
	u8 temp[8][8];
	*local_u8collisionflag = 0;

	for (localx_u8counter = 0; localx_u8counter < 8; localx_u8counter++) {
		for (localy_u8counter = 0; localy_u8counter < 8; localy_u8counter++) {
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	88 30       	cpi	r24, 0x08	; 8
     de4:	08 f4       	brcc	.+2      	; 0xde8 <check4collisioion+0xc8>
     de6:	bb cf       	rjmp	.-138    	; 0xd5e <check4collisioion+0x3e>
	u8 localx_u8counter = 0;
	u8 localy_u8counter = 0;
	u8 temp[8][8];
	*local_u8collisionflag = 0;

	for (localx_u8counter = 0; localx_u8counter < 8; localx_u8counter++) {
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	88 30       	cpi	r24, 0x08	; 8
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <check4collisioion+0xd6>
     df4:	b2 cf       	rjmp	.-156    	; 0xd5a <check4collisioion+0x3a>
					movingpart[localx_u8counter][localy_u8counter]
							+ background[localx_u8counter][localy_u8counter];
		}

	}
	for (localx_u8counter = 0; localx_u8counter < 8; localx_u8counter++) {
     df6:	1a 82       	std	Y+2, r1	; 0x02
     df8:	42 c0       	rjmp	.+132    	; 0xe7e <check4collisioion+0x15e>
		for (localy_u8counter = 0; localy_u8counter < 8; localy_u8counter++) {
     dfa:	19 82       	std	Y+1, r1	; 0x01
     dfc:	3a c0       	rjmp	.+116    	; 0xe72 <check4collisioion+0x152>
			if (temp[localx_u8counter][localy_u8counter] == 0 ||temp[localx_u8counter][localy_u8counter] == 1) {
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	48 2f       	mov	r20, r24
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	ce 01       	movw	r24, r28
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	82 0f       	add	r24, r18
     e1c:	93 1f       	adc	r25, r19
     e1e:	84 0f       	add	r24, r20
     e20:	95 1f       	adc	r25, r21
     e22:	fc 01       	movw	r30, r24
     e24:	32 96       	adiw	r30, 0x02	; 2
     e26:	80 81       	ld	r24, Z
     e28:	88 23       	and	r24, r24
     e2a:	01 f1       	breq	.+64     	; 0xe6c <check4collisioion+0x14c>
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	48 2f       	mov	r20, r24
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	82 0f       	add	r24, r18
     e4a:	93 1f       	adc	r25, r19
     e4c:	84 0f       	add	r24, r20
     e4e:	95 1f       	adc	r25, r21
     e50:	fc 01       	movw	r30, r24
     e52:	32 96       	adiw	r30, 0x02	; 2
     e54:	80 81       	ld	r24, Z
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	49 f0       	breq	.+18     	; 0xe6c <check4collisioion+0x14c>

			} else {
				*local_u8collisionflag = 1;
     e5a:	fe 01       	movw	r30, r28
     e5c:	ed 5b       	subi	r30, 0xBD	; 189
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	01 90       	ld	r0, Z+
     e62:	f0 81       	ld	r31, Z
     e64:	e0 2d       	mov	r30, r0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 83       	st	Z, r24
     e6a:	06 c0       	rjmp	.+12     	; 0xe78 <check4collisioion+0x158>
							+ background[localx_u8counter][localy_u8counter];
		}

	}
	for (localx_u8counter = 0; localx_u8counter < 8; localx_u8counter++) {
		for (localy_u8counter = 0; localy_u8counter < 8; localy_u8counter++) {
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 30       	cpi	r24, 0x08	; 8
     e76:	18 f2       	brcs	.-122    	; 0xdfe <check4collisioion+0xde>
					movingpart[localx_u8counter][localy_u8counter]
							+ background[localx_u8counter][localy_u8counter];
		}

	}
	for (localx_u8counter = 0; localx_u8counter < 8; localx_u8counter++) {
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	08 f4       	brcc	.+2      	; 0xe86 <check4collisioion+0x166>
     e84:	ba cf       	rjmp	.-140    	; 0xdfa <check4collisioion+0xda>
			}

		}
	}

}
     e86:	cc 5b       	subi	r28, 0xBC	; 188
     e88:	df 4f       	sbci	r29, 0xFF	; 255
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <KPD_voidInit>:
const u8 KPD_MAP[5]={1,2,3,0,4};
//const u8 KPD_MAP[5]={0,1,2,3,4};

const u8 ChkErr[2]={1,0};
extern void KPD_voidInit()
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
//	KPD_State=0 ;
	//make the port low nibbles pulled up
	DIO_u8WritePortVal(DIO_u8PORT0,0xf0);
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	60 ef       	ldi	r22, 0xF0	; 240
     eaa:	0e 94 3e 0c 	call	0x187c	; 0x187c <DIO_u8WritePortVal>
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <KPD_u8Read>:

extern void KPD_u8Read(u8 *Copy_PtrToBtnIdx)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	60 97       	sbiw	r28, 0x10	; 16
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_LoopCount;
	u8 Local_OutCount=0 ;
     ecc:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_temp=0 ;
     ece:	1c 82       	std	Y+4, r1	; 0x04
    u8 KPD_State=0;
     ed0:	19 82       	std	Y+1, r1	; 0x01

	for(Local_LoopCount=1;Local_LoopCount<=8;Local_LoopCount*=2)
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	8b 83       	std	Y+3, r24	; 0x03
     ed6:	03 c1       	rjmp	.+518    	; 0x10de <KPD_u8Read+0x22a>
	{
		    DIO_u8WritePinVal(KPD_u8Pin1,! GetBit(Local_LoopCount,0));
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	18 8a       	std	Y+16, r1	; 0x10
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	11 f4       	brne	.+4      	; 0xeec <KPD_u8Read+0x38>
     ee8:	21 e0       	ldi	r18, 0x01	; 1
     eea:	28 8b       	std	Y+16, r18	; 0x10
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	68 89       	ldd	r22, Y+16	; 0x10
     ef0:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
		    DIO_u8WritePinVal(KPD_u8Pin2,! GetBit(Local_LoopCount,1));
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	82 70       	andi	r24, 0x02	; 2
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	95 95       	asr	r25
     f00:	87 95       	ror	r24
     f02:	1f 86       	std	Y+15, r1	; 0x0f
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	11 f4       	brne	.+4      	; 0xf0c <KPD_u8Read+0x58>
     f08:	31 e0       	ldi	r19, 0x01	; 1
     f0a:	3f 87       	std	Y+15, r19	; 0x0f
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	6f 85       	ldd	r22, Y+15	; 0x0f
     f10:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
		    DIO_u8WritePinVal(KPD_u8Pin3,! GetBit(Local_LoopCount,2));
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	84 70       	andi	r24, 0x04	; 4
     f1c:	90 70       	andi	r25, 0x00	; 0
     f1e:	95 95       	asr	r25
     f20:	87 95       	ror	r24
     f22:	95 95       	asr	r25
     f24:	87 95       	ror	r24
     f26:	1e 86       	std	Y+14, r1	; 0x0e
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	11 f4       	brne	.+4      	; 0xf30 <KPD_u8Read+0x7c>
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	8e 87       	std	Y+14, r24	; 0x0e
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	6e 85       	ldd	r22, Y+14	; 0x0e
     f34:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>
		    DIO_u8WritePinVal(KPD_u8Pin4,! GetBit(Local_LoopCount,3));
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 70       	andi	r24, 0x08	; 8
     f40:	90 70       	andi	r25, 0x00	; 0
     f42:	95 95       	asr	r25
     f44:	87 95       	ror	r24
     f46:	95 95       	asr	r25
     f48:	87 95       	ror	r24
     f4a:	95 95       	asr	r25
     f4c:	87 95       	ror	r24
     f4e:	1d 86       	std	Y+13, r1	; 0x0d
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	11 f4       	brne	.+4      	; 0xf58 <KPD_u8Read+0xa4>
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	9d 87       	std	Y+13, r25	; 0x0d
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	6d 85       	ldd	r22, Y+13	; 0x0d
     f5c:	0e 94 bf 0a 	call	0x157e	; 0x157e <DIO_u8WritePinVal>

		    DIO_u8ReadPinValue(KPD_u8Pin5,& local_temp);
     f60:	9e 01       	movw	r18, r28
     f62:	2c 5f       	subi	r18, 0xFC	; 252
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	b9 01       	movw	r22, r18
     f6a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8ReadPinValue>
		    KPD_State+=(!local_temp);
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	1c 86       	std	Y+12, r1	; 0x0c
     f72:	88 23       	and	r24, r24
     f74:	11 f4       	brne	.+4      	; 0xf7a <KPD_u8Read+0xc6>
     f76:	21 e0       	ldi	r18, 0x01	; 1
     f78:	2c 87       	std	Y+12, r18	; 0x0c
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	3c 85       	ldd	r19, Y+12	; 0x0c
     f7e:	83 0f       	add	r24, r19
     f80:	89 83       	std	Y+1, r24	; 0x01
		    DIO_u8ReadPinValue(KPD_u8Pin6,& local_temp);
     f82:	9e 01       	movw	r18, r28
     f84:	2c 5f       	subi	r18, 0xFC	; 252
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	85 e0       	ldi	r24, 0x05	; 5
     f8a:	b9 01       	movw	r22, r18
     f8c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8ReadPinValue>
		    KPD_State+=(!local_temp)*2;
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	88 23       	and	r24, r24
     f94:	19 f4       	brne	.+6      	; 0xf9c <KPD_u8Read+0xe8>
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	8b 87       	std	Y+11, r24	; 0x0b
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <KPD_u8Read+0xea>
     f9c:	1b 86       	std	Y+11, r1	; 0x0b
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa2:	89 0f       	add	r24, r25
     fa4:	89 83       	std	Y+1, r24	; 0x01
		    DIO_u8ReadPinValue(KPD_u8Pin7,& local_temp);
     fa6:	9e 01       	movw	r18, r28
     fa8:	2c 5f       	subi	r18, 0xFC	; 252
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	b9 01       	movw	r22, r18
     fb0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8ReadPinValue>
		    KPD_State+=(!local_temp)*4;
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	88 23       	and	r24, r24
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <KPD_u8Read+0x10c>
     fba:	24 e0       	ldi	r18, 0x04	; 4
     fbc:	2a 87       	std	Y+10, r18	; 0x0a
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <KPD_u8Read+0x10e>
     fc0:	1a 86       	std	Y+10, r1	; 0x0a
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc6:	83 0f       	add	r24, r19
     fc8:	89 83       	std	Y+1, r24	; 0x01
		    DIO_u8ReadPinValue(KPD_u8Pin8,& local_temp);
     fca:	9e 01       	movw	r18, r28
     fcc:	2c 5f       	subi	r18, 0xFC	; 252
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	87 e0       	ldi	r24, 0x07	; 7
     fd2:	b9 01       	movw	r22, r18
     fd4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8ReadPinValue>
		    KPD_State+=(!local_temp)*8;
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	88 23       	and	r24, r24
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <KPD_u8Read+0x130>
     fde:	88 e0       	ldi	r24, 0x08	; 8
     fe0:	89 87       	std	Y+9, r24	; 0x09
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <KPD_u8Read+0x132>
     fe4:	19 86       	std	Y+9, r1	; 0x09
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	99 85       	ldd	r25, Y+9	; 0x09
     fea:	89 0f       	add	r24, r25
     fec:	89 83       	std	Y+1, r24	; 0x01

		    if(KPD_State)
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 23       	and	r24, r24
     ff2:	09 f4       	brne	.+2      	; 0xff6 <KPD_u8Read+0x142>
     ff4:	6b c0       	rjmp	.+214    	; 0x10cc <KPD_u8Read+0x218>
         {
		    	switch(Local_LoopCount)
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	38 87       	std	Y+8, r19	; 0x08
     ffe:	2f 83       	std	Y+7, r18	; 0x07
    1000:	8f 81       	ldd	r24, Y+7	; 0x07
    1002:	98 85       	ldd	r25, Y+8	; 0x08
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	91 05       	cpc	r25, r1
    1008:	41 f1       	breq	.+80     	; 0x105a <KPD_u8Read+0x1a6>
    100a:	2f 81       	ldd	r18, Y+7	; 0x07
    100c:	38 85       	ldd	r19, Y+8	; 0x08
    100e:	23 30       	cpi	r18, 0x03	; 3
    1010:	31 05       	cpc	r19, r1
    1012:	34 f4       	brge	.+12     	; 0x1020 <KPD_u8Read+0x16c>
    1014:	8f 81       	ldd	r24, Y+7	; 0x07
    1016:	98 85       	ldd	r25, Y+8	; 0x08
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	61 f0       	breq	.+24     	; 0x1036 <KPD_u8Read+0x182>
    101e:	63 c0       	rjmp	.+198    	; 0x10e6 <KPD_u8Read+0x232>
    1020:	2f 81       	ldd	r18, Y+7	; 0x07
    1022:	38 85       	ldd	r19, Y+8	; 0x08
    1024:	24 30       	cpi	r18, 0x04	; 4
    1026:	31 05       	cpc	r19, r1
    1028:	59 f1       	breq	.+86     	; 0x1080 <KPD_u8Read+0x1cc>
    102a:	8f 81       	ldd	r24, Y+7	; 0x07
    102c:	98 85       	ldd	r25, Y+8	; 0x08
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	91 05       	cpc	r25, r1
    1032:	c9 f1       	breq	.+114    	; 0x10a6 <KPD_u8Read+0x1f2>
    1034:	58 c0       	rjmp	.+176    	; 0x10e6 <KPD_u8Read+0x232>
		    	{
		    	case 0x01:

		        	 *Copy_PtrToBtnIdx=KPD_Btns[KPD_MAP[KPD_State/2]];
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	86 95       	lsr	r24
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	ea 57       	subi	r30, 0x7A	; 122
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	fc 01       	movw	r30, r24
    104c:	eb 58       	subi	r30, 0x8B	; 139
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 81       	ld	r24, Z
    1052:	ed 81       	ldd	r30, Y+5	; 0x05
    1054:	fe 81       	ldd	r31, Y+6	; 0x06
    1056:	80 83       	st	Z, r24
    1058:	46 c0       	rjmp	.+140    	; 0x10e6 <KPD_u8Read+0x232>


		    		break;
		    	case 0x02:
		        	 *Copy_PtrToBtnIdx=KPD_Btns[KPD_MAP[KPD_State/2]+(4)];
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	86 95       	lsr	r24
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	ea 57       	subi	r30, 0x7A	; 122
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	04 96       	adiw	r24, 0x04	; 4
    1070:	fc 01       	movw	r30, r24
    1072:	eb 58       	subi	r30, 0x8B	; 139
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	80 81       	ld	r24, Z
    1078:	ed 81       	ldd	r30, Y+5	; 0x05
    107a:	fe 81       	ldd	r31, Y+6	; 0x06
    107c:	80 83       	st	Z, r24
    107e:	33 c0       	rjmp	.+102    	; 0x10e6 <KPD_u8Read+0x232>

		    		break;
		    	case 0x04:
		        	 *Copy_PtrToBtnIdx=KPD_Btns[KPD_MAP[KPD_State/2]+(8)];
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	86 95       	lsr	r24
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	fc 01       	movw	r30, r24
    108a:	ea 57       	subi	r30, 0x7A	; 122
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 81       	ld	r24, Z
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	08 96       	adiw	r24, 0x08	; 8
    1096:	fc 01       	movw	r30, r24
    1098:	eb 58       	subi	r30, 0x8B	; 139
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	ed 81       	ldd	r30, Y+5	; 0x05
    10a0:	fe 81       	ldd	r31, Y+6	; 0x06
    10a2:	80 83       	st	Z, r24
    10a4:	20 c0       	rjmp	.+64     	; 0x10e6 <KPD_u8Read+0x232>

		    		break;
		    	case 0x08:
		        	 *Copy_PtrToBtnIdx=KPD_Btns[KPD_MAP[KPD_State/2]+(12)];
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	86 95       	lsr	r24
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	fc 01       	movw	r30, r24
    10b0:	ea 57       	subi	r30, 0x7A	; 122
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	80 81       	ld	r24, Z
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0c 96       	adiw	r24, 0x0c	; 12
    10bc:	fc 01       	movw	r30, r24
    10be:	eb 58       	subi	r30, 0x8B	; 139
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 81       	ld	r24, Z
    10c4:	ed 81       	ldd	r30, Y+5	; 0x05
    10c6:	fe 81       	ldd	r31, Y+6	; 0x06
    10c8:	80 83       	st	Z, r24
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <KPD_u8Read+0x232>
        	 break ;

         }
         else
         {
        	 *Copy_PtrToBtnIdx=0;
    10cc:	ed 81       	ldd	r30, Y+5	; 0x05
    10ce:	fe 81       	ldd	r31, Y+6	; 0x06
    10d0:	10 82       	st	Z, r1
	u8 Local_LoopCount;
	u8 Local_OutCount=0 ;
    u8 local_temp=0 ;
    u8 KPD_State=0;

	for(Local_LoopCount=1;Local_LoopCount<=8;Local_LoopCount*=2)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	8b 83       	std	Y+3, r24	; 0x03
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	89 30       	cpi	r24, 0x09	; 9
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <KPD_u8Read+0x232>
    10e4:	f9 ce       	rjmp	.-526    	; 0xed8 <KPD_u8Read+0x24>
         }

	}

	return ;
}
    10e6:	60 96       	adiw	r28, 0x10	; 16
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <KPD_GetBtn>:

extern u8 KPD_GetBtn(u8 Copy_u8BtnIdx,u8 *Copy_u8BtnVal)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	27 97       	sbiw	r28, 0x07	; 7
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	8a 83       	std	Y+2, r24	; 0x02
    110e:	7c 83       	std	Y+4, r23	; 0x04
    1110:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_PrsdBtn ;
	KPD_u8Read(&Local_PrsdBtn);
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <KPD_u8Read>

	*Copy_u8BtnVal=(Local_PrsdBtn==Copy_u8BtnIdx);
    111a:	99 81       	ldd	r25, Y+1	; 0x01
    111c:	1f 82       	std	Y+7, r1	; 0x07
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	98 17       	cp	r25, r24
    1122:	11 f4       	brne	.+4      	; 0x1128 <KPD_GetBtn+0x30>
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	8f 83       	std	Y+7, r24	; 0x07
    1128:	eb 81       	ldd	r30, Y+3	; 0x03
    112a:	fc 81       	ldd	r31, Y+4	; 0x04
    112c:	9f 81       	ldd	r25, Y+7	; 0x07
    112e:	90 83       	st	Z, r25
	return ChkErr[Copy_u8BtnIdx<16];
    1130:	1e 82       	std	Y+6, r1	; 0x06
    1132:	1d 82       	std	Y+5, r1	; 0x05
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	80 31       	cpi	r24, 0x10	; 16
    1138:	20 f4       	brcc	.+8      	; 0x1142 <KPD_GetBtn+0x4a>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
    1142:	ed 81       	ldd	r30, Y+5	; 0x05
    1144:	fe 81       	ldd	r31, Y+6	; 0x06
    1146:	e5 57       	subi	r30, 0x75	; 117
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	80 81       	ld	r24, Z
}
    114c:	27 96       	adiw	r28, 0x07	; 7
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <KeyPad_voidInit>:
/***********************************************/
/********** Public function ********************/
/***********************************************/

/*comment!:to initialize the KeyPad Acording to the config file */
extern void KeyPad_voidInit(void) {
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Counter = 0;
    1168:	19 82       	std	Y+1, r1	; 0x01
//initializing the rows as output
	for (local_u8Counter = KEYPAD_PRIVATE_u8ArrayOfRowZeroElement;
    116a:	19 82       	std	Y+1, r1	; 0x01
    116c:	0d c0       	rjmp	.+26     	; 0x1188 <KeyPad_voidInit+0x2a>
			local_u8Counter < KEYPAD_PRIVATE_u8ArrayOfRowLastElement;
			local_u8Counter++) {
		DIO_u8WritePinDir(KEYPAD_PRIVATE_u8ArrayOfRows[local_u8Counter],
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	fc 01       	movw	r30, r24
    1176:	e5 59       	subi	r30, 0x95	; 149
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 81       	ld	r24, Z
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <DIO_u8WritePinDir>
extern void KeyPad_voidInit(void) {
	u8 local_u8Counter = 0;
//initializing the rows as output
	for (local_u8Counter = KEYPAD_PRIVATE_u8ArrayOfRowZeroElement;
			local_u8Counter < KEYPAD_PRIVATE_u8ArrayOfRowLastElement;
			local_u8Counter++) {
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	8f 5f       	subi	r24, 0xFF	; 255
    1186:	89 83       	std	Y+1, r24	; 0x01
/*comment!:to initialize the KeyPad Acording to the config file */
extern void KeyPad_voidInit(void) {
	u8 local_u8Counter = 0;
//initializing the rows as output
	for (local_u8Counter = KEYPAD_PRIVATE_u8ArrayOfRowZeroElement;
			local_u8Counter < KEYPAD_PRIVATE_u8ArrayOfRowLastElement;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	84 30       	cpi	r24, 0x04	; 4
    118c:	80 f3       	brcs	.-32     	; 0x116e <KeyPad_voidInit+0x10>
		DIO_u8WritePinDir(KEYPAD_PRIVATE_u8ArrayOfRows[local_u8Counter],
		DIO_u8OUTPUT);
	}

	//initializing the Cols as input
	for (local_u8Counter = KEYPAD_PRIVATE_u8ArrayOfColZeroElement;
    118e:	19 82       	std	Y+1, r1	; 0x01
    1190:	0d c0       	rjmp	.+26     	; 0x11ac <KeyPad_voidInit+0x4e>
			local_u8Counter < KEYPAD_PRIVATE_u8ArrayOfColLastElement;
			local_u8Counter++) {

		DIO_u8WritePinDir(KEYPAD_PRIVATE_u8ArrayOfCols[local_u8Counter],
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	fc 01       	movw	r30, r24
    119a:	e1 59       	subi	r30, 0x91	; 145
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	80 81       	ld	r24, Z
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <DIO_u8WritePinDir>
	}

	//initializing the Cols as input
	for (local_u8Counter = KEYPAD_PRIVATE_u8ArrayOfColZeroElement;
			local_u8Counter < KEYPAD_PRIVATE_u8ArrayOfColLastElement;
			local_u8Counter++) {
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8OUTPUT);
	}

	//initializing the Cols as input
	for (local_u8Counter = KEYPAD_PRIVATE_u8ArrayOfColZeroElement;
			local_u8Counter < KEYPAD_PRIVATE_u8ArrayOfColLastElement;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	84 30       	cpi	r24, 0x04	; 4
    11b0:	80 f3       	brcs	.-32     	; 0x1192 <KeyPad_voidInit+0x34>
			local_u8Counter++) {

		DIO_u8WritePinDir(KEYPAD_PRIVATE_u8ArrayOfCols[local_u8Counter],
		DIO_u8INPUT);
	}
}
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <KeyPad_u8Read>:

/*comment!:to loop for the Keypad and check for one button only at atime  */
extern u8 KeyPad_u8Read(FBF_keyPad * Copy_unionFBF_keyPadPtrToVal) {
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <KeyPad_u8Read+0x6>
    11c0:	0f 92       	push	r0
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	9b 83       	std	Y+3, r25	; 0x03
    11c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8OperationStatus = ok;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01

	//TODO add the body of the read after handling the bouncing

	return local_u8OperationStatus;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01

}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <KeyPad_u8checkSwitch>:

/*comment!:to Read and chek for aspecific Button */
extern u8 KeyPad_u8checkSwitch(u8 Copy_u8KeyIndex, u8 Copy_u8PtrtoVal) {
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <KeyPad_u8checkSwitch+0x6>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	8a 83       	std	Y+2, r24	; 0x02
    11ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8OperationStatus = ok;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01

	//TODO add the body of the checkSwitch after handling the bouncing

	return local_u8OperationStatus;
    11f0:	89 81       	ldd	r24, Y+1	; 0x01

}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <KeyPad_u8DebouncingSol>:
/***********************************************/
/********** Private function ********************/
/***********************************************/

//TODO make the KeyPad_u8DebouncingSol static and delete it proto type from the Interfsce
extern u8 KeyPad_u8DebouncingSol(u8 Copy_u8KeyIndex, u8 *Copy_u8PtrtoVal) {
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	29 97       	sbiw	r28, 0x09	; 9
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	8b 83       	std	Y+3, r24	; 0x03
    1214:	7d 83       	std	Y+5, r23	; 0x05
    1216:	6c 83       	std	Y+4, r22	; 0x04
	//local_u8OperationStatus --> will return the status of the operation
	//Local_u8CurrentVal -->the value the i will read the value of button in
	u8 local_u8OperationStatus = ok, Local_u8CurrentVal;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01
			MAXCOUNTER, Local_U8State = RELEASED;
	//local_u8StaticOldVal -->astatic variable that determine the previous  state of the button
	//to use in debouncing state to know each state i came from to return that value till i get out the debouncing state
	u8 static local_u8StaticOldVal;
	//switch the state of the button initialy is released
	switch (Local_U8State) {
    121c:	80 91 5d 01 	lds	r24, 0x015D
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	39 87       	std	Y+9, r19	; 0x09
    1226:	28 87       	std	Y+8, r18	; 0x08
    1228:	88 85       	ldd	r24, Y+8	; 0x08
    122a:	99 85       	ldd	r25, Y+9	; 0x09
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	91 05       	cpc	r25, r1
    1230:	f9 f0       	breq	.+62     	; 0x1270 <KeyPad_u8DebouncingSol+0x72>
    1232:	28 85       	ldd	r18, Y+8	; 0x08
    1234:	39 85       	ldd	r19, Y+9	; 0x09
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	89 f1       	breq	.+98     	; 0x129e <KeyPad_u8DebouncingSol+0xa0>
    123c:	88 85       	ldd	r24, Y+8	; 0x08
    123e:	99 85       	ldd	r25, Y+9	; 0x09
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	09 f0       	breq	.+2      	; 0x1246 <KeyPad_u8DebouncingSol+0x48>
    1244:	6b c0       	rjmp	.+214    	; 0x131c <KeyPad_u8DebouncingSol+0x11e>
	// realesed state
	case RELEASED:
		//return the released state
		*Copy_u8PtrtoVal = RELEASED;
    1246:	ec 81       	ldd	r30, Y+4	; 0x04
    1248:	fd 81       	ldd	r31, Y+5	; 0x05
    124a:	10 82       	st	Z, r1
		//read the piv val
		local_u8OperationStatus = DIO_u8ReadPinValue(Copy_u8KeyIndex,
    124c:	9e 01       	movw	r18, r28
    124e:	2e 5f       	subi	r18, 0xFE	; 254
    1250:	3f 4f       	sbci	r19, 0xFF	; 255
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	b9 01       	movw	r22, r18
    1256:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8ReadPinValue>
    125a:	89 83       	std	Y+1, r24	; 0x01
				&Local_u8CurrentVal);
		//if the readed value is high so SAVE THE Current state in the old state and go to debouncing
		if (Local_u8CurrentVal == DIO_u8HIGH) {
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	09 f0       	breq	.+2      	; 0x1264 <KeyPad_u8DebouncingSol+0x66>
    1262:	5c c0       	rjmp	.+184    	; 0x131c <KeyPad_u8DebouncingSol+0x11e>
			local_u8StaticOldVal = RELEASED;
    1264:	10 92 5c 01 	sts	0x015C, r1
			Local_U8State = DEBOUNCING;
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	80 93 5d 01 	sts	0x015D, r24
    126e:	56 c0       	rjmp	.+172    	; 0x131c <KeyPad_u8DebouncingSol+0x11e>
		}
		break;
		// realesed state
	case PRESSED:
		//return the released state
		*Copy_u8PtrtoVal = PRESSED;
    1270:	ec 81       	ldd	r30, Y+4	; 0x04
    1272:	fd 81       	ldd	r31, Y+5	; 0x05
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 83       	st	Z, r24
		//read the piv val
		local_u8OperationStatus = DIO_u8ReadPinValue(Copy_u8KeyIndex,
    1278:	9e 01       	movw	r18, r28
    127a:	2e 5f       	subi	r18, 0xFE	; 254
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	b9 01       	movw	r22, r18
    1282:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8ReadPinValue>
    1286:	89 83       	std	Y+1, r24	; 0x01
				&Local_u8CurrentVal);
		//if the readed value is LOW so SAVE THE Current state in the old state and go to debouncing
		if (Local_u8CurrentVal == DIO_u8LOW) {
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	88 23       	and	r24, r24
    128c:	09 f0       	breq	.+2      	; 0x1290 <KeyPad_u8DebouncingSol+0x92>
    128e:	46 c0       	rjmp	.+140    	; 0x131c <KeyPad_u8DebouncingSol+0x11e>
			local_u8StaticOldVal = PRESSED;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 5c 01 	sts	0x015C, r24
			Local_U8State = DEBOUNCING;
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	80 93 5d 01 	sts	0x015D, r24
    129c:	3f c0       	rjmp	.+126    	; 0x131c <KeyPad_u8DebouncingSol+0x11e>
		}
		break;
		//	DEBOUNCING STATE
	case DEBOUNCING:
		//try to return the val of the old saved value as debouncing didnt determine yet the true current state
		*Copy_u8PtrtoVal = local_u8StaticOldVal;
    129e:	80 91 5c 01 	lds	r24, 0x015C
    12a2:	ec 81       	ldd	r30, Y+4	; 0x04
    12a4:	fd 81       	ldd	r31, Y+5	; 0x05
    12a6:	80 83       	st	Z, r24
		//read the piv val
		local_u8OperationStatus = DIO_u8ReadPinValue(Copy_u8KeyIndex,
    12a8:	9e 01       	movw	r18, r28
    12aa:	2e 5f       	subi	r18, 0xFE	; 254
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	b9 01       	movw	r22, r18
    12b2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8ReadPinValue>
    12b6:	89 83       	std	Y+1, r24	; 0x01
				&Local_u8CurrentVal);
		//switch the value of the Pin
		switch (Local_u8CurrentVal) {
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3f 83       	std	Y+7, r19	; 0x07
    12c0:	2e 83       	std	Y+6, r18	; 0x06
    12c2:	8e 81       	ldd	r24, Y+6	; 0x06
    12c4:	9f 81       	ldd	r25, Y+7	; 0x07
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	c1 f0       	breq	.+48     	; 0x12fa <KeyPad_u8DebouncingSol+0xfc>
    12ca:	2e 81       	ldd	r18, Y+6	; 0x06
    12cc:	3f 81       	ldd	r19, Y+7	; 0x07
    12ce:	21 30       	cpi	r18, 0x01	; 1
    12d0:	31 05       	cpc	r19, r1
    12d2:	21 f5       	brne	.+72     	; 0x131c <KeyPad_u8DebouncingSol+0x11e>
		// in the case of High decrement the  local_u8StaticUpCounter if it reach MINCOUNTER=0
		//if local_u8StaticUpCounter=MAXCOUNTER=50 then the status will turn into PRESSED
		case DIO_u8HIGH:
			local_u8StaticUpCounter--;
    12d4:	80 91 74 00 	lds	r24, 0x0074
    12d8:	81 50       	subi	r24, 0x01	; 1
    12da:	80 93 74 00 	sts	0x0074, r24
			if (local_u8StaticUpCounter == MINCOUNTER) {
    12de:	80 91 74 00 	lds	r24, 0x0074
    12e2:	88 23       	and	r24, r24
    12e4:	d9 f4       	brne	.+54     	; 0x131c <KeyPad_u8DebouncingSol+0x11e>
				local_u8StaticDownCounter = MAXCOUNTER;
    12e6:	82 e3       	ldi	r24, 0x32	; 50
    12e8:	80 93 73 00 	sts	0x0073, r24
				local_u8StaticUpCounter = MAXCOUNTER;
    12ec:	82 e3       	ldi	r24, 0x32	; 50
    12ee:	80 93 74 00 	sts	0x0074, r24
				Local_U8State = PRESSED;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 93 5d 01 	sts	0x015D, r24
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <KeyPad_u8DebouncingSol+0x11e>

			break;
			// in the case of lOW READING decrement the  local_u8StaticdOWNCounter if it reach MINCOUNTER=0
			//if local_u8StaticUpCounter=MAXCOUNTER=50 then the status will turn into RELEASED
		case DIO_u8LOW:
			local_u8StaticDownCounter--;
    12fa:	80 91 73 00 	lds	r24, 0x0073
    12fe:	81 50       	subi	r24, 0x01	; 1
    1300:	80 93 73 00 	sts	0x0073, r24
			if (local_u8StaticDownCounter == MINCOUNTER) {
    1304:	80 91 73 00 	lds	r24, 0x0073
    1308:	88 23       	and	r24, r24
    130a:	41 f4       	brne	.+16     	; 0x131c <KeyPad_u8DebouncingSol+0x11e>
				local_u8StaticDownCounter = MAXCOUNTER;
    130c:	82 e3       	ldi	r24, 0x32	; 50
    130e:	80 93 73 00 	sts	0x0073, r24
				local_u8StaticUpCounter = MAXCOUNTER;
    1312:	82 e3       	ldi	r24, 0x32	; 50
    1314:	80 93 74 00 	sts	0x0074, r24
				Local_U8State = RELEASED;
    1318:	10 92 5d 01 	sts	0x015D, r1
		//do Nothing
		break;

	}
	// RETURN THE STATUS OF READING
	return local_u8OperationStatus;
    131c:	89 81       	ldd	r24, Y+1	; 0x01

}
    131e:	29 96       	adiw	r28, 0x09	; 9
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <DIO_voidInit>:
/***********************************************************/
/******************public functions*************************/
/***********************************************************/

/*comment!:initialization function*/
extern void DIO_voidInit(void) {
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <DIO_voidInit+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <DIO_voidInit+0x8>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62

	DDRA = DIO_u8PORTADIR;
    133c:	ea e3       	ldi	r30, 0x3A	; 58
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8f e0       	ldi	r24, 0x0F	; 15
    1342:	80 83       	st	Z, r24
	DDRB = DIO_u8PORTBDIR;
    1344:	e7 e3       	ldi	r30, 0x37	; 55
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	8f ef       	ldi	r24, 0xFF	; 255
    134a:	80 83       	st	Z, r24
	DDRC = DIO_u8PORTCDIR;
    134c:	e4 e3       	ldi	r30, 0x34	; 52
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	80 83       	st	Z, r24
	DDRD = DIO_u8PORTDDIR;
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	81 ef       	ldi	r24, 0xF1	; 241
    135a:	80 83       	st	Z, r24

	PORTA &= ~DIO_u8PORTADIR;
    135c:	ab e3       	ldi	r26, 0x3B	; 59
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 7f       	andi	r24, 0xF0	; 240
    1368:	8c 93       	st	X, r24
	PORTB &= ~DIO_u8PORTBDIR;
    136a:	e8 e3       	ldi	r30, 0x38	; 56
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	e8 e3       	ldi	r30, 0x38	; 56
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	10 82       	st	Z, r1
	PORTC &= ~DIO_u8PORTCDIR;
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	e5 e3       	ldi	r30, 0x35	; 53
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	10 82       	st	Z, r1
	PORTD &= ~DIO_u8PORTDDIR;
    1382:	a2 e3       	ldi	r26, 0x32	; 50
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8e 70       	andi	r24, 0x0E	; 14
    138e:	8c 93       	st	X, r24

	PORTA |= (DIO_u8PORTADIR & DIO_u8ValuePortA);
    1390:	ab e3       	ldi	r26, 0x3B	; 59
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8f 60       	ori	r24, 0x0F	; 15
    139c:	8c 93       	st	X, r24
	PORTB |= (DIO_u8PORTBDIR & DIO_u8ValuePortB);
    139e:	e8 e3       	ldi	r30, 0x38	; 56
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	e8 e3       	ldi	r30, 0x38	; 56
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	80 83       	st	Z, r24
	PORTC |= (DIO_u8PORTCDIR & DIO_u8ValuePortC);
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	e5 e3       	ldi	r30, 0x35	; 53
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	80 83       	st	Z, r24
	PORTD |= (DIO_u8PORTDDIR & DIO_u8ValuePortD);
    13ba:	a2 e3       	ldi	r26, 0x32	; 50
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e2 e3       	ldi	r30, 0x32	; 50
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	81 6b       	ori	r24, 0xB1	; 177
    13c6:	8c 93       	st	X, r24
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <DIO_u8ReadPinValue>:

/*comment!:Read Pin Value */
extern u8 DIO_u8ReadPinValue(u8 Copy_u8PINIdx, u8* Copy_u8PtrToVal) {
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	27 97       	sbiw	r28, 0x07	; 7
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	8b 83       	std	Y+3, r24	; 0x03
    13ec:	7d 83       	std	Y+5, r23	; 0x05
    13ee:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8OperationStatus, local_u8CheckPort;
	local_u8CheckPort = Copy_u8PINIdx / DIO_u8PINSPERPORT;
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	86 95       	lsr	r24
    13f4:	86 95       	lsr	r24
    13f6:	86 95       	lsr	r24
    13f8:	89 83       	std	Y+1, r24	; 0x01

	switch (local_u8CheckPort) {
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3f 83       	std	Y+7, r19	; 0x07
    1402:	2e 83       	std	Y+6, r18	; 0x06
    1404:	4e 81       	ldd	r20, Y+6	; 0x06
    1406:	5f 81       	ldd	r21, Y+7	; 0x07
    1408:	41 30       	cpi	r20, 0x01	; 1
    140a:	51 05       	cpc	r21, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <DIO_u8ReadPinValue+0x3a>
    140e:	3d c0       	rjmp	.+122    	; 0x148a <DIO_u8ReadPinValue+0xb4>
    1410:	8e 81       	ldd	r24, Y+6	; 0x06
    1412:	9f 81       	ldd	r25, Y+7	; 0x07
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	91 05       	cpc	r25, r1
    1418:	34 f4       	brge	.+12     	; 0x1426 <DIO_u8ReadPinValue+0x50>
    141a:	2e 81       	ldd	r18, Y+6	; 0x06
    141c:	3f 81       	ldd	r19, Y+7	; 0x07
    141e:	21 15       	cp	r18, r1
    1420:	31 05       	cpc	r19, r1
    1422:	71 f0       	breq	.+28     	; 0x1440 <DIO_u8ReadPinValue+0x6a>
    1424:	a1 c0       	rjmp	.+322    	; 0x1568 <DIO_u8ReadPinValue+0x192>
    1426:	4e 81       	ldd	r20, Y+6	; 0x06
    1428:	5f 81       	ldd	r21, Y+7	; 0x07
    142a:	42 30       	cpi	r20, 0x02	; 2
    142c:	51 05       	cpc	r21, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <DIO_u8ReadPinValue+0x5c>
    1430:	51 c0       	rjmp	.+162    	; 0x14d4 <DIO_u8ReadPinValue+0xfe>
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <DIO_u8ReadPinValue+0x68>
    143c:	70 c0       	rjmp	.+224    	; 0x151e <DIO_u8ReadPinValue+0x148>
    143e:	94 c0       	rjmp	.+296    	; 0x1568 <DIO_u8ReadPinValue+0x192>
	case DIO_u8PORT0:
		local_u8OperationStatus = ok;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PINIdx = Copy_u8PINIdx % DIO_u8PINSPERPORT;
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	87 70       	andi	r24, 0x07	; 7
    1448:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8PtrToVal = GetBit(PINA, Copy_u8PINIdx);
    144a:	e9 e3       	ldi	r30, 0x39	; 57
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_u8ReadPinValue+0x8e>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	2a 95       	dec	r18
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_u8ReadPinValue+0x8a>
    1468:	9a 01       	movw	r18, r20
    146a:	28 23       	and	r18, r24
    146c:	39 23       	and	r19, r25
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a9 01       	movw	r20, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_u8ReadPinValue+0xa6>
    1478:	55 95       	asr	r21
    147a:	47 95       	ror	r20
    147c:	8a 95       	dec	r24
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_u8ReadPinValue+0xa2>
    1480:	ca 01       	movw	r24, r20
    1482:	ec 81       	ldd	r30, Y+4	; 0x04
    1484:	fd 81       	ldd	r31, Y+5	; 0x05
    1486:	80 83       	st	Z, r24
    1488:	70 c0       	rjmp	.+224    	; 0x156a <DIO_u8ReadPinValue+0x194>
		break;
	case DIO_u8PORT1:
		local_u8OperationStatus = ok;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PINIdx = Copy_u8PINIdx % DIO_u8PINSPERPORT;
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	87 70       	andi	r24, 0x07	; 7
    1492:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8PtrToVal = GetBit(PINB, Copy_u8PINIdx);
    1494:	e6 e3       	ldi	r30, 0x36	; 54
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_u8ReadPinValue+0xd8>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	2a 95       	dec	r18
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_u8ReadPinValue+0xd4>
    14b2:	9a 01       	movw	r18, r20
    14b4:	28 23       	and	r18, r24
    14b6:	39 23       	and	r19, r25
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a9 01       	movw	r20, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_u8ReadPinValue+0xf0>
    14c2:	55 95       	asr	r21
    14c4:	47 95       	ror	r20
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_u8ReadPinValue+0xec>
    14ca:	ca 01       	movw	r24, r20
    14cc:	ec 81       	ldd	r30, Y+4	; 0x04
    14ce:	fd 81       	ldd	r31, Y+5	; 0x05
    14d0:	80 83       	st	Z, r24
    14d2:	4b c0       	rjmp	.+150    	; 0x156a <DIO_u8ReadPinValue+0x194>
		break;
	case DIO_u8PORT2:
		local_u8OperationStatus = ok;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PINIdx = Copy_u8PINIdx % DIO_u8PINSPERPORT;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	87 70       	andi	r24, 0x07	; 7
    14dc:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8PtrToVal = GetBit(PINC, Copy_u8PINIdx);
    14de:	e3 e3       	ldi	r30, 0x33	; 51
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8ReadPinValue+0x122>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	2a 95       	dec	r18
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8ReadPinValue+0x11e>
    14fc:	9a 01       	movw	r18, r20
    14fe:	28 23       	and	r18, r24
    1500:	39 23       	and	r19, r25
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_u8ReadPinValue+0x13a>
    150c:	55 95       	asr	r21
    150e:	47 95       	ror	r20
    1510:	8a 95       	dec	r24
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_u8ReadPinValue+0x136>
    1514:	ca 01       	movw	r24, r20
    1516:	ec 81       	ldd	r30, Y+4	; 0x04
    1518:	fd 81       	ldd	r31, Y+5	; 0x05
    151a:	80 83       	st	Z, r24
    151c:	26 c0       	rjmp	.+76     	; 0x156a <DIO_u8ReadPinValue+0x194>
		break;
	case DIO_u8PORT3:
		local_u8OperationStatus = ok;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PINIdx = Copy_u8PINIdx % DIO_u8PINSPERPORT;
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	87 70       	andi	r24, 0x07	; 7
    1526:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8PtrToVal = GetBit(PIND, Copy_u8PINIdx);
    1528:	e0 e3       	ldi	r30, 0x30	; 48
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_u8ReadPinValue+0x16c>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	2a 95       	dec	r18
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_u8ReadPinValue+0x168>
    1546:	9a 01       	movw	r18, r20
    1548:	28 23       	and	r18, r24
    154a:	39 23       	and	r19, r25
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_u8ReadPinValue+0x184>
    1556:	55 95       	asr	r21
    1558:	47 95       	ror	r20
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_u8ReadPinValue+0x180>
    155e:	ca 01       	movw	r24, r20
    1560:	ec 81       	ldd	r30, Y+4	; 0x04
    1562:	fd 81       	ldd	r31, Y+5	; 0x05
    1564:	80 83       	st	Z, r24
    1566:	01 c0       	rjmp	.+2      	; 0x156a <DIO_u8ReadPinValue+0x194>
		break;
	default:
		local_u8OperationStatus = error;
    1568:	1a 82       	std	Y+2, r1	; 0x02
		break;

	}

	return local_u8OperationStatus;
    156a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    156c:	27 96       	adiw	r28, 0x07	; 7
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <DIO_u8WritePinVal>:

/*comment!:Write Pin Value */
extern u8 DIO_u8WritePinVal(u8 Copy_u8PINIdx, u8 Copy_u8PinVal) {
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	2e 97       	sbiw	r28, 0x0e	; 14
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	8b 83       	std	Y+3, r24	; 0x03
    1594:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8OperationStatus, local_u8CheckPort;
	local_u8CheckPort = Copy_u8PINIdx / DIO_u8PINSPERPORT;
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	86 95       	lsr	r24
    159a:	86 95       	lsr	r24
    159c:	86 95       	lsr	r24
    159e:	89 83       	std	Y+1, r24	; 0x01

	switch (local_u8CheckPort) {
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3e 87       	std	Y+14, r19	; 0x0e
    15a8:	2d 87       	std	Y+13, r18	; 0x0d
    15aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <DIO_u8WritePinVal+0x38>
    15b4:	54 c0       	rjmp	.+168    	; 0x165e <DIO_u8WritePinVal+0xe0>
    15b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    15b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	2c f4       	brge	.+10     	; 0x15ca <DIO_u8WritePinVal+0x4c>
    15c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	71 f0       	breq	.+28     	; 0x15e4 <DIO_u8WritePinVal+0x66>
    15c8:	00 c1       	rjmp	.+512    	; 0x17ca <DIO_u8WritePinVal+0x24c>
    15ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    15cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <DIO_u8WritePinVal+0x58>
    15d4:	81 c0       	rjmp	.+258    	; 0x16d8 <DIO_u8WritePinVal+0x15a>
    15d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <DIO_u8WritePinVal+0x64>
    15e0:	b8 c0       	rjmp	.+368    	; 0x1752 <DIO_u8WritePinVal+0x1d4>
    15e2:	f3 c0       	rjmp	.+486    	; 0x17ca <DIO_u8WritePinVal+0x24c>
	case DIO_u8PORT0:
		local_u8OperationStatus = ok;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PINIdx = Copy_u8PINIdx % DIO_u8PINSPERPORT;
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	87 70       	andi	r24, 0x07	; 7
    15ec:	8b 83       	std	Y+3, r24	; 0x03
		switch (Copy_u8PinVal) {
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3c 87       	std	Y+12, r19	; 0x0c
    15f6:	2b 87       	std	Y+11, r18	; 0x0b
    15f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	d1 f0       	breq	.+52     	; 0x1634 <DIO_u8WritePinVal+0xb6>
    1600:	2b 85       	ldd	r18, Y+11	; 0x0b
    1602:	3c 85       	ldd	r19, Y+12	; 0x0c
    1604:	21 30       	cpi	r18, 0x01	; 1
    1606:	31 05       	cpc	r19, r1
    1608:	09 f0       	breq	.+2      	; 0x160c <DIO_u8WritePinVal+0x8e>
    160a:	e0 c0       	rjmp	.+448    	; 0x17cc <DIO_u8WritePinVal+0x24e>

		case DIO_u8HIGH:
			PORTA=Setbit(PORTA, Copy_u8PINIdx);
    160c:	ab e3       	ldi	r26, 0x3B	; 59
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	eb e3       	ldi	r30, 0x3B	; 59
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8WritePinVal+0xac>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_u8WritePinVal+0xa8>
    162e:	84 2b       	or	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	cc c0       	rjmp	.+408    	; 0x17cc <DIO_u8WritePinVal+0x24e>
			break;
		case DIO_u8LOW:
			PORTA=Clrbit(PORTA, Copy_u8PINIdx);
    1634:	ab e3       	ldi	r26, 0x3B	; 59
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_u8WritePinVal+0xd4>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_u8WritePinVal+0xd0>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24
    165c:	b7 c0       	rjmp	.+366    	; 0x17cc <DIO_u8WritePinVal+0x24e>
		default:
			break;
		}
		break;
	case DIO_u8PORT1:
		local_u8OperationStatus = ok;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PINIdx = Copy_u8PINIdx % DIO_u8PINSPERPORT;
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	87 70       	andi	r24, 0x07	; 7
    1666:	8b 83       	std	Y+3, r24	; 0x03
		switch (Copy_u8PinVal) {
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3a 87       	std	Y+10, r19	; 0x0a
    1670:	29 87       	std	Y+9, r18	; 0x09
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	d1 f0       	breq	.+52     	; 0x16ae <DIO_u8WritePinVal+0x130>
    167a:	29 85       	ldd	r18, Y+9	; 0x09
    167c:	3a 85       	ldd	r19, Y+10	; 0x0a
    167e:	21 30       	cpi	r18, 0x01	; 1
    1680:	31 05       	cpc	r19, r1
    1682:	09 f0       	breq	.+2      	; 0x1686 <DIO_u8WritePinVal+0x108>
    1684:	a3 c0       	rjmp	.+326    	; 0x17cc <DIO_u8WritePinVal+0x24e>

		case DIO_u8HIGH:
			PORTB=Setbit(PORTB, Copy_u8PINIdx);
    1686:	a8 e3       	ldi	r26, 0x38	; 56
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e8 e3       	ldi	r30, 0x38	; 56
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_u8WritePinVal+0x126>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_u8WritePinVal+0x122>
    16a8:	84 2b       	or	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	8f c0       	rjmp	.+286    	; 0x17cc <DIO_u8WritePinVal+0x24e>
			break;
		case DIO_u8LOW:
			PORTB=Clrbit(PORTB, Copy_u8PINIdx);
    16ae:	a8 e3       	ldi	r26, 0x38	; 56
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e8 e3       	ldi	r30, 0x38	; 56
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_u8WritePinVal+0x14e>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_u8WritePinVal+0x14a>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	7a c0       	rjmp	.+244    	; 0x17cc <DIO_u8WritePinVal+0x24e>
		default:
			break;
		}
		break;
	case DIO_u8PORT2:
		local_u8OperationStatus = ok;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PINIdx = Copy_u8PINIdx % DIO_u8PINSPERPORT;
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	87 70       	andi	r24, 0x07	; 7
    16e0:	8b 83       	std	Y+3, r24	; 0x03
		switch (Copy_u8PinVal) {
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	38 87       	std	Y+8, r19	; 0x08
    16ea:	2f 83       	std	Y+7, r18	; 0x07
    16ec:	8f 81       	ldd	r24, Y+7	; 0x07
    16ee:	98 85       	ldd	r25, Y+8	; 0x08
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	d1 f0       	breq	.+52     	; 0x1728 <DIO_u8WritePinVal+0x1aa>
    16f4:	2f 81       	ldd	r18, Y+7	; 0x07
    16f6:	38 85       	ldd	r19, Y+8	; 0x08
    16f8:	21 30       	cpi	r18, 0x01	; 1
    16fa:	31 05       	cpc	r19, r1
    16fc:	09 f0       	breq	.+2      	; 0x1700 <DIO_u8WritePinVal+0x182>
    16fe:	66 c0       	rjmp	.+204    	; 0x17cc <DIO_u8WritePinVal+0x24e>

		case DIO_u8HIGH:
			PORTC=Setbit(PORTC, Copy_u8PINIdx);
    1700:	a5 e3       	ldi	r26, 0x35	; 53
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_u8WritePinVal+0x1a0>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_u8WritePinVal+0x19c>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	52 c0       	rjmp	.+164    	; 0x17cc <DIO_u8WritePinVal+0x24e>
			break;
		case DIO_u8LOW:
			PORTC=Clrbit(PORTC, Copy_u8PINIdx);
    1728:	a5 e3       	ldi	r26, 0x35	; 53
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e5 e3       	ldi	r30, 0x35	; 53
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8WritePinVal+0x1c8>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_u8WritePinVal+0x1c4>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	3d c0       	rjmp	.+122    	; 0x17cc <DIO_u8WritePinVal+0x24e>
		default:
			break;
		}
		break;
	case DIO_u8PORT3:
		local_u8OperationStatus = ok;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PINIdx = Copy_u8PINIdx % DIO_u8PINSPERPORT;
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	87 70       	andi	r24, 0x07	; 7
    175a:	8b 83       	std	Y+3, r24	; 0x03
		switch (Copy_u8PinVal) {
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	3e 83       	std	Y+6, r19	; 0x06
    1764:	2d 83       	std	Y+5, r18	; 0x05
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	c9 f0       	breq	.+50     	; 0x17a0 <DIO_u8WritePinVal+0x222>
    176e:	2d 81       	ldd	r18, Y+5	; 0x05
    1770:	3e 81       	ldd	r19, Y+6	; 0x06
    1772:	21 30       	cpi	r18, 0x01	; 1
    1774:	31 05       	cpc	r19, r1
    1776:	51 f5       	brne	.+84     	; 0x17cc <DIO_u8WritePinVal+0x24e>

		case DIO_u8HIGH:
			PORTD=Setbit(PORTD, Copy_u8PINIdx);
    1778:	a2 e3       	ldi	r26, 0x32	; 50
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e2 e3       	ldi	r30, 0x32	; 50
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_u8WritePinVal+0x218>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_u8WritePinVal+0x214>
    179a:	84 2b       	or	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	16 c0       	rjmp	.+44     	; 0x17cc <DIO_u8WritePinVal+0x24e>
			break;
		case DIO_u8LOW:
			PORTD=Clrbit(PORTD, Copy_u8PINIdx);
    17a0:	a2 e3       	ldi	r26, 0x32	; 50
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e2 e3       	ldi	r30, 0x32	; 50
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_u8WritePinVal+0x240>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_u8WritePinVal+0x23c>
    17c2:	80 95       	com	r24
    17c4:	84 23       	and	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <DIO_u8WritePinVal+0x24e>
		default:
			break;
		}
		break;
	default:
		local_u8OperationStatus = error;
    17ca:	1a 82       	std	Y+2, r1	; 0x02
		break;

	}

	return local_u8OperationStatus;
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17ce:	2e 96       	adiw	r28, 0x0e	; 14
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <DIO_u8ReadPortVal>:

/*comment!: Read Port Value*/
extern u8 DIO_u8ReadPortVal(u8 Copy_u8PINIdx, u8* Copy_u8PtrToVal) {
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	29 97       	sbiw	r28, 0x09	; 9
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	7f 83       	std	Y+7, r23	; 0x07
    17f8:	6e 83       	std	Y+6, r22	; 0x06
	u8 local_u8Counter, local_u8incommingValue, local_u8Check,
			local_u8OperationStatus;
	Copy_u8PtrToVal = 0x00;
    17fa:	1f 82       	std	Y+7, r1	; 0x07
    17fc:	1e 82       	std	Y+6, r1	; 0x06
	for (local_u8Counter = 0; local_u8Counter < DIO_u8PINSPERPORT;
    17fe:	1b 82       	std	Y+3, r1	; 0x03
    1800:	30 c0       	rjmp	.+96     	; 0x1862 <DIO_u8ReadPortVal+0x82>
			local_u8Counter++) {
		Copy_u8PINIdx += local_u8Counter;
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	89 0f       	add	r24, r25
    1808:	8d 83       	std	Y+5, r24	; 0x05
		local_u8Check = DIO_u8ReadPinValue(Copy_u8PINIdx,
    180a:	9e 01       	movw	r18, r28
    180c:	2c 5f       	subi	r18, 0xFC	; 252
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	b9 01       	movw	r22, r18
    1814:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <DIO_u8ReadPinValue>
    1818:	8a 83       	std	Y+2, r24	; 0x02
				&local_u8incommingValue);
		switch (local_u8Check) {
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	39 87       	std	Y+9, r19	; 0x09
    1822:	28 87       	std	Y+8, r18	; 0x08
    1824:	88 85       	ldd	r24, Y+8	; 0x08
    1826:	99 85       	ldd	r25, Y+9	; 0x09
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	b9 f0       	breq	.+46     	; 0x185a <DIO_u8ReadPortVal+0x7a>
    182c:	28 85       	ldd	r18, Y+8	; 0x08
    182e:	39 85       	ldd	r19, Y+9	; 0x09
    1830:	21 30       	cpi	r18, 0x01	; 1
    1832:	31 05       	cpc	r19, r1
    1834:	99 f4       	brne	.+38     	; 0x185c <DIO_u8ReadPortVal+0x7c>
		case ok:
			local_u8OperationStatus = ok;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	89 83       	std	Y+1, r24	; 0x01
			*Copy_u8PtrToVal |= local_u8incommingValue;
    183a:	ee 81       	ldd	r30, Y+6	; 0x06
    183c:	ff 81       	ldd	r31, Y+7	; 0x07
    183e:	90 81       	ld	r25, Z
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	89 2b       	or	r24, r25
    1844:	ee 81       	ldd	r30, Y+6	; 0x06
    1846:	ff 81       	ldd	r31, Y+7	; 0x07
    1848:	80 83       	st	Z, r24
			*Copy_u8PtrToVal <<= 1;
    184a:	ee 81       	ldd	r30, Y+6	; 0x06
    184c:	ff 81       	ldd	r31, Y+7	; 0x07
    184e:	80 81       	ld	r24, Z
    1850:	88 0f       	add	r24, r24
    1852:	ee 81       	ldd	r30, Y+6	; 0x06
    1854:	ff 81       	ldd	r31, Y+7	; 0x07
    1856:	80 83       	st	Z, r24
    1858:	01 c0       	rjmp	.+2      	; 0x185c <DIO_u8ReadPortVal+0x7c>
			break;
		case error:
			local_u8OperationStatus = error;
    185a:	19 82       	std	Y+1, r1	; 0x01
extern u8 DIO_u8ReadPortVal(u8 Copy_u8PINIdx, u8* Copy_u8PtrToVal) {
	u8 local_u8Counter, local_u8incommingValue, local_u8Check,
			local_u8OperationStatus;
	Copy_u8PtrToVal = 0x00;
	for (local_u8Counter = 0; local_u8Counter < DIO_u8PINSPERPORT;
			local_u8Counter++) {
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	8b 83       	std	Y+3, r24	; 0x03
/*comment!: Read Port Value*/
extern u8 DIO_u8ReadPortVal(u8 Copy_u8PINIdx, u8* Copy_u8PtrToVal) {
	u8 local_u8Counter, local_u8incommingValue, local_u8Check,
			local_u8OperationStatus;
	Copy_u8PtrToVal = 0x00;
	for (local_u8Counter = 0; local_u8Counter < DIO_u8PINSPERPORT;
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	68 f2       	brcs	.-102    	; 0x1802 <DIO_u8ReadPortVal+0x22>
		default:
			break;
		}

	}
	return local_u8OperationStatus;
    1868:	89 81       	ldd	r24, Y+1	; 0x01
}
    186a:	29 96       	adiw	r28, 0x09	; 9
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <DIO_u8WritePortVal>:

/*comment!: Write Port Value */
extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx, u8 Copy_u8PortVal) {
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <DIO_u8WritePortVal+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <DIO_u8WritePortVal+0x8>
    1884:	0f 92       	push	r0
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	6b 83       	std	Y+3, r22	; 0x03

	u8	local_u8OperationStatus;
	switch (Copy_u8PortIdx) {
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3d 83       	std	Y+5, r19	; 0x05
    1896:	2c 83       	std	Y+4, r18	; 0x04
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	e1 f0       	breq	.+56     	; 0x18da <DIO_u8WritePortVal+0x5e>
    18a2:	2c 81       	ldd	r18, Y+4	; 0x04
    18a4:	3d 81       	ldd	r19, Y+5	; 0x05
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <DIO_u8WritePortVal+0x3a>
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	61 f0       	breq	.+24     	; 0x18cc <DIO_u8WritePortVal+0x50>
    18b4:	27 c0       	rjmp	.+78     	; 0x1904 <DIO_u8WritePortVal+0x88>
    18b6:	2c 81       	ldd	r18, Y+4	; 0x04
    18b8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	31 05       	cpc	r19, r1
    18be:	a1 f0       	breq	.+40     	; 0x18e8 <DIO_u8WritePortVal+0x6c>
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	83 30       	cpi	r24, 0x03	; 3
    18c6:	91 05       	cpc	r25, r1
    18c8:	b1 f0       	breq	.+44     	; 0x18f6 <DIO_u8WritePortVal+0x7a>
    18ca:	1c c0       	rjmp	.+56     	; 0x1904 <DIO_u8WritePortVal+0x88>
	case DIO_u8PORT0:
		local_u8OperationStatus = ok;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01
		PORTA = Copy_u8PortVal;
    18d0:	eb e3       	ldi	r30, 0x3B	; 59
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	80 83       	st	Z, r24
    18d8:	16 c0       	rjmp	.+44     	; 0x1906 <DIO_u8WritePortVal+0x8a>

		break;
	case DIO_u8PORT1:
		local_u8OperationStatus = ok;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	89 83       	std	Y+1, r24	; 0x01
		PORTB = Copy_u8PortVal;
    18de:	e8 e3       	ldi	r30, 0x38	; 56
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	80 83       	st	Z, r24
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <DIO_u8WritePortVal+0x8a>
		break;
	case DIO_u8PORT2:
		local_u8OperationStatus = ok;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	89 83       	std	Y+1, r24	; 0x01
		PORTC = Copy_u8PortVal;
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	80 83       	st	Z, r24
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <DIO_u8WritePortVal+0x8a>
		break;
	case DIO_u8PORT3:
		local_u8OperationStatus = ok;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
		PORTD = Copy_u8PortVal;
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	80 83       	st	Z, r24
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <DIO_u8WritePortVal+0x8a>
		break;
	default:
		local_u8OperationStatus = error;
    1904:	19 82       	std	Y+1, r1	; 0x01
		break;

	}

	return local_u8OperationStatus;
    1906:	89 81       	ldd	r24, Y+1	; 0x01

}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <DIO_u8ReadPinDir>:

/*comment!:Read Pin Direction*/
extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx, u8* Copy_u8PtrToDir) {
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	27 97       	sbiw	r28, 0x07	; 7
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	8b 83       	std	Y+3, r24	; 0x03
    192e:	7d 83       	std	Y+5, r23	; 0x05
    1930:	6c 83       	std	Y+4, r22	; 0x04

	u8 local_u8OperationStatus, local_u8CheckPort;
	local_u8CheckPort = Copy_u8PinIdx / DIO_u8PINSPERPORT;
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	86 95       	lsr	r24
    1936:	86 95       	lsr	r24
    1938:	86 95       	lsr	r24
    193a:	89 83       	std	Y+1, r24	; 0x01

	switch (local_u8CheckPort) {
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3f 83       	std	Y+7, r19	; 0x07
    1944:	2e 83       	std	Y+6, r18	; 0x06
    1946:	4e 81       	ldd	r20, Y+6	; 0x06
    1948:	5f 81       	ldd	r21, Y+7	; 0x07
    194a:	41 30       	cpi	r20, 0x01	; 1
    194c:	51 05       	cpc	r21, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <DIO_u8ReadPinDir+0x3a>
    1950:	3d c0       	rjmp	.+122    	; 0x19cc <DIO_u8ReadPinDir+0xb4>
    1952:	8e 81       	ldd	r24, Y+6	; 0x06
    1954:	9f 81       	ldd	r25, Y+7	; 0x07
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	91 05       	cpc	r25, r1
    195a:	34 f4       	brge	.+12     	; 0x1968 <DIO_u8ReadPinDir+0x50>
    195c:	2e 81       	ldd	r18, Y+6	; 0x06
    195e:	3f 81       	ldd	r19, Y+7	; 0x07
    1960:	21 15       	cp	r18, r1
    1962:	31 05       	cpc	r19, r1
    1964:	71 f0       	breq	.+28     	; 0x1982 <DIO_u8ReadPinDir+0x6a>
    1966:	a1 c0       	rjmp	.+322    	; 0x1aaa <DIO_u8ReadPinDir+0x192>
    1968:	4e 81       	ldd	r20, Y+6	; 0x06
    196a:	5f 81       	ldd	r21, Y+7	; 0x07
    196c:	42 30       	cpi	r20, 0x02	; 2
    196e:	51 05       	cpc	r21, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <DIO_u8ReadPinDir+0x5c>
    1972:	51 c0       	rjmp	.+162    	; 0x1a16 <DIO_u8ReadPinDir+0xfe>
    1974:	8e 81       	ldd	r24, Y+6	; 0x06
    1976:	9f 81       	ldd	r25, Y+7	; 0x07
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <DIO_u8ReadPinDir+0x68>
    197e:	70 c0       	rjmp	.+224    	; 0x1a60 <DIO_u8ReadPinDir+0x148>
    1980:	94 c0       	rjmp	.+296    	; 0x1aaa <DIO_u8ReadPinDir+0x192>
	case DIO_u8PORT0:
		local_u8OperationStatus = ok;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PinIdx = Copy_u8PinIdx % DIO_u8PINSPERPORT;
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	87 70       	andi	r24, 0x07	; 7
    198a:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8PtrToDir = GetBit(DDRA, Copy_u8PinIdx);
    198c:	ea e3       	ldi	r30, 0x3A	; 58
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_u8ReadPinDir+0x8e>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	2a 95       	dec	r18
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_u8ReadPinDir+0x8a>
    19aa:	9a 01       	movw	r18, r20
    19ac:	28 23       	and	r18, r24
    19ae:	39 23       	and	r19, r25
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a9 01       	movw	r20, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <DIO_u8ReadPinDir+0xa6>
    19ba:	55 95       	asr	r21
    19bc:	47 95       	ror	r20
    19be:	8a 95       	dec	r24
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <DIO_u8ReadPinDir+0xa2>
    19c2:	ca 01       	movw	r24, r20
    19c4:	ec 81       	ldd	r30, Y+4	; 0x04
    19c6:	fd 81       	ldd	r31, Y+5	; 0x05
    19c8:	80 83       	st	Z, r24
    19ca:	70 c0       	rjmp	.+224    	; 0x1aac <DIO_u8ReadPinDir+0x194>
		break;
	case DIO_u8PORT1:
		local_u8OperationStatus = ok;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PinIdx = Copy_u8PinIdx % DIO_u8PINSPERPORT;
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	87 70       	andi	r24, 0x07	; 7
    19d4:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8PtrToDir = GetBit(DDRB, Copy_u8PinIdx);
    19d6:	e7 e3       	ldi	r30, 0x37	; 55
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_u8ReadPinDir+0xd8>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	2a 95       	dec	r18
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_u8ReadPinDir+0xd4>
    19f4:	9a 01       	movw	r18, r20
    19f6:	28 23       	and	r18, r24
    19f8:	39 23       	and	r19, r25
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a9 01       	movw	r20, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <DIO_u8ReadPinDir+0xf0>
    1a04:	55 95       	asr	r21
    1a06:	47 95       	ror	r20
    1a08:	8a 95       	dec	r24
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <DIO_u8ReadPinDir+0xec>
    1a0c:	ca 01       	movw	r24, r20
    1a0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a10:	fd 81       	ldd	r31, Y+5	; 0x05
    1a12:	80 83       	st	Z, r24
    1a14:	4b c0       	rjmp	.+150    	; 0x1aac <DIO_u8ReadPinDir+0x194>
		break;
	case DIO_u8PORT2:
		local_u8OperationStatus = ok;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PinIdx = Copy_u8PinIdx % DIO_u8PINSPERPORT;
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	87 70       	andi	r24, 0x07	; 7
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8PtrToDir = GetBit(DDRC, Copy_u8PinIdx);
    1a20:	e4 e3       	ldi	r30, 0x34	; 52
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <DIO_u8ReadPinDir+0x122>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	2a 95       	dec	r18
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <DIO_u8ReadPinDir+0x11e>
    1a3e:	9a 01       	movw	r18, r20
    1a40:	28 23       	and	r18, r24
    1a42:	39 23       	and	r19, r25
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a9 01       	movw	r20, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <DIO_u8ReadPinDir+0x13a>
    1a4e:	55 95       	asr	r21
    1a50:	47 95       	ror	r20
    1a52:	8a 95       	dec	r24
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <DIO_u8ReadPinDir+0x136>
    1a56:	ca 01       	movw	r24, r20
    1a58:	ec 81       	ldd	r30, Y+4	; 0x04
    1a5a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a5c:	80 83       	st	Z, r24
    1a5e:	26 c0       	rjmp	.+76     	; 0x1aac <DIO_u8ReadPinDir+0x194>
		break;
	case DIO_u8PORT3:
		local_u8OperationStatus = ok;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8PinIdx = Copy_u8PinIdx % DIO_u8PINSPERPORT;
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	87 70       	andi	r24, 0x07	; 7
    1a68:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8PtrToDir = GetBit(DDRD, Copy_u8PinIdx);
    1a6a:	e1 e3       	ldi	r30, 0x31	; 49
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_u8ReadPinDir+0x16c>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	2a 95       	dec	r18
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <DIO_u8ReadPinDir+0x168>
    1a88:	9a 01       	movw	r18, r20
    1a8a:	28 23       	and	r18, r24
    1a8c:	39 23       	and	r19, r25
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a9 01       	movw	r20, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_u8ReadPinDir+0x184>
    1a98:	55 95       	asr	r21
    1a9a:	47 95       	ror	r20
    1a9c:	8a 95       	dec	r24
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_u8ReadPinDir+0x180>
    1aa0:	ca 01       	movw	r24, r20
    1aa2:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa4:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa6:	80 83       	st	Z, r24
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <DIO_u8ReadPinDir+0x194>
		break;
	default:
		local_u8OperationStatus = error;
    1aaa:	1a 82       	std	Y+2, r1	; 0x02
		break;

	}

	return local_u8OperationStatus;
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1aae:	27 96       	adiw	r28, 0x07	; 7
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <DIO_u8ReadPortDir>:

/*comment!:Read Port Direction*/
extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx, u8* Copy_u8PtrToDir) {
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <DIO_u8ReadPortDir+0x6>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <DIO_u8ReadPortDir+0x8>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <DIO_u8ReadPortDir+0xa>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	8a 83       	std	Y+2, r24	; 0x02
    1ad0:	7c 83       	std	Y+4, r23	; 0x04
    1ad2:	6b 83       	std	Y+3, r22	; 0x03

	u8 local_u8OperationStatus=ok;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortIdx) {
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3e 83       	std	Y+6, r19	; 0x06
    1ae0:	2d 83       	std	Y+5, r18	; 0x05
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	e1 f0       	breq	.+56     	; 0x1b24 <DIO_u8ReadPortDir+0x64>
    1aec:	2d 81       	ldd	r18, Y+5	; 0x05
    1aee:	3e 81       	ldd	r19, Y+6	; 0x06
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <DIO_u8ReadPortDir+0x40>
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <DIO_u8ReadPortDir+0x56>
    1afe:	27 c0       	rjmp	.+78     	; 0x1b4e <DIO_u8ReadPortDir+0x8e>
    1b00:	2d 81       	ldd	r18, Y+5	; 0x05
    1b02:	3e 81       	ldd	r19, Y+6	; 0x06
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	a1 f0       	breq	.+40     	; 0x1b32 <DIO_u8ReadPortDir+0x72>
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	91 05       	cpc	r25, r1
    1b12:	b1 f0       	breq	.+44     	; 0x1b40 <DIO_u8ReadPortDir+0x80>
    1b14:	1c c0       	rjmp	.+56     	; 0x1b4e <DIO_u8ReadPortDir+0x8e>
	case DIO_u8PORT0:
		*Copy_u8PtrToDir = DDRA;
    1b16:	ea e3       	ldi	r30, 0x3A	; 58
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b20:	80 83       	st	Z, r24
    1b22:	16 c0       	rjmp	.+44     	; 0x1b50 <DIO_u8ReadPortDir+0x90>

		break;
	case DIO_u8PORT1:
		*Copy_u8PtrToDir = DDRB;
    1b24:	e7 e3       	ldi	r30, 0x37	; 55
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b2e:	80 83       	st	Z, r24
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <DIO_u8ReadPortDir+0x90>

		break;
	case DIO_u8PORT2:
		*Copy_u8PtrToDir = DDRC;
    1b32:	e4 e3       	ldi	r30, 0x34	; 52
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	eb 81       	ldd	r30, Y+3	; 0x03
    1b3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b3c:	80 83       	st	Z, r24
    1b3e:	08 c0       	rjmp	.+16     	; 0x1b50 <DIO_u8ReadPortDir+0x90>

		break;
	case DIO_u8PORT3:
		*Copy_u8PtrToDir = DDRD;
    1b40:	e1 e3       	ldi	r30, 0x31	; 49
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	eb 81       	ldd	r30, Y+3	; 0x03
    1b48:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4a:	80 83       	st	Z, r24
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <DIO_u8ReadPortDir+0x90>

		break;
	default:
		local_u8OperationStatus = error;
    1b4e:	19 82       	std	Y+1, r1	; 0x01
		break;

	}

	return local_u8OperationStatus;
    1b50:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b52:	26 96       	adiw	r28, 0x06	; 6
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <DIO_u8WritePortDir>:


/*comment!:Write Port Direction*/
extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx, u8 Copy_u8PortDir) {
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <DIO_u8WritePortDir+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <DIO_u8WritePortDir+0x8>
    1b6c:	0f 92       	push	r0
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	8a 83       	std	Y+2, r24	; 0x02
    1b74:	6b 83       	std	Y+3, r22	; 0x03

	u8 local_u8OperationStatus=ok;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortIdx) {
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3d 83       	std	Y+5, r19	; 0x05
    1b82:	2c 83       	std	Y+4, r18	; 0x04
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	9d 81       	ldd	r25, Y+5	; 0x05
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	d1 f0       	breq	.+52     	; 0x1bc2 <DIO_u8WritePortDir+0x5e>
    1b8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b90:	3d 81       	ldd	r19, Y+5	; 0x05
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <DIO_u8WritePortDir+0x3e>
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	61 f0       	breq	.+24     	; 0x1bb8 <DIO_u8WritePortDir+0x54>
    1ba0:	1f c0       	rjmp	.+62     	; 0x1be0 <DIO_u8WritePortDir+0x7c>
    1ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	81 f0       	breq	.+32     	; 0x1bcc <DIO_u8WritePortDir+0x68>
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	81 f0       	breq	.+32     	; 0x1bd6 <DIO_u8WritePortDir+0x72>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <DIO_u8WritePortDir+0x7c>
	case DIO_u8PORT0:
		DDRA = Copy_u8PortDir;
    1bb8:	ea e3       	ldi	r30, 0x3A	; 58
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	80 83       	st	Z, r24
    1bc0:	10 c0       	rjmp	.+32     	; 0x1be2 <DIO_u8WritePortDir+0x7e>
		break;
	case DIO_u8PORT1:
		DDRB = Copy_u8PortDir;
    1bc2:	e7 e3       	ldi	r30, 0x37	; 55
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	80 83       	st	Z, r24
    1bca:	0b c0       	rjmp	.+22     	; 0x1be2 <DIO_u8WritePortDir+0x7e>
		break;
	case DIO_u8PORT2:
		DDRC = Copy_u8PortDir;
    1bcc:	e4 e3       	ldi	r30, 0x34	; 52
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	80 83       	st	Z, r24
    1bd4:	06 c0       	rjmp	.+12     	; 0x1be2 <DIO_u8WritePortDir+0x7e>
		break;
	case DIO_u8PORT3:
		DDRD = Copy_u8PortDir;
    1bd6:	e1 e3       	ldi	r30, 0x31	; 49
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	80 83       	st	Z, r24
    1bde:	01 c0       	rjmp	.+2      	; 0x1be2 <DIO_u8WritePortDir+0x7e>
		break;
	default:
		local_u8OperationStatus = error;
    1be0:	19 82       	std	Y+1, r1	; 0x01
		break;

	}

	return local_u8OperationStatus;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <DIO_u8WritePinDir>:



/*comment!:Write Pin Direction*/
extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx, u8 Copy_u8PinDir) {
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	2e 97       	sbiw	r28, 0x0e	; 14
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	6c 83       	std	Y+4, r22	; 0x04

	u8 local_u8OperationStatus, local_u8CheckPort;
		local_u8CheckPort = Copy_u8PinIdx / DIO_u8PINSPERPORT;
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	86 95       	lsr	r24
    1c10:	86 95       	lsr	r24
    1c12:	86 95       	lsr	r24
    1c14:	89 83       	std	Y+1, r24	; 0x01

		switch (local_u8CheckPort) {
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	3e 87       	std	Y+14, r19	; 0x0e
    1c1e:	2d 87       	std	Y+13, r18	; 0x0d
    1c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	91 05       	cpc	r25, r1
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <DIO_u8WritePinDir+0x38>
    1c2a:	54 c0       	rjmp	.+168    	; 0x1cd4 <DIO_u8WritePinDir+0xe0>
    1c2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <DIO_u8WritePinDir+0x4c>
    1c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	71 f0       	breq	.+28     	; 0x1c5a <DIO_u8WritePinDir+0x66>
    1c3e:	00 c1       	rjmp	.+512    	; 0x1e40 <DIO_u8WritePinDir+0x24c>
    1c40:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c42:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <DIO_u8WritePinDir+0x58>
    1c4a:	81 c0       	rjmp	.+258    	; 0x1d4e <DIO_u8WritePinDir+0x15a>
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	83 30       	cpi	r24, 0x03	; 3
    1c52:	91 05       	cpc	r25, r1
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <DIO_u8WritePinDir+0x64>
    1c56:	b8 c0       	rjmp	.+368    	; 0x1dc8 <DIO_u8WritePinDir+0x1d4>
    1c58:	f3 c0       	rjmp	.+486    	; 0x1e40 <DIO_u8WritePinDir+0x24c>
		case DIO_u8PORT0:
			local_u8OperationStatus = ok;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	8a 83       	std	Y+2, r24	; 0x02
			Copy_u8PinIdx = Copy_u8PinIdx % DIO_u8PINSPERPORT;
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	87 70       	andi	r24, 0x07	; 7
    1c62:	8b 83       	std	Y+3, r24	; 0x03
			switch (Copy_u8PinDir) {
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3c 87       	std	Y+12, r19	; 0x0c
    1c6c:	2b 87       	std	Y+11, r18	; 0x0b
    1c6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c70:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	d1 f0       	breq	.+52     	; 0x1caa <DIO_u8WritePinDir+0xb6>
    1c76:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c78:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c7a:	21 30       	cpi	r18, 0x01	; 1
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <DIO_u8WritePinDir+0x8e>
    1c80:	e0 c0       	rjmp	.+448    	; 0x1e42 <DIO_u8WritePinDir+0x24e>

			case DIO_u8HIGH:
				DDRA=Setbit(DDRA, Copy_u8PinIdx);
    1c82:	aa e3       	ldi	r26, 0x3A	; 58
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ea e3       	ldi	r30, 0x3A	; 58
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_u8WritePinDir+0xac>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <DIO_u8WritePinDir+0xa8>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	cc c0       	rjmp	.+408    	; 0x1e42 <DIO_u8WritePinDir+0x24e>
				break;
			case DIO_u8LOW:
				DDRA=Clrbit(DDRA, Copy_u8PinIdx);
    1caa:	aa e3       	ldi	r26, 0x3A	; 58
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ea e3       	ldi	r30, 0x3A	; 58
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_u8WritePinDir+0xd4>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_u8WritePinDir+0xd0>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	b7 c0       	rjmp	.+366    	; 0x1e42 <DIO_u8WritePinDir+0x24e>
			default:
				break;
			}
			break;
		case DIO_u8PORT1:
			local_u8OperationStatus = ok;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
			Copy_u8PinIdx = Copy_u8PinIdx % DIO_u8PINSPERPORT;
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	87 70       	andi	r24, 0x07	; 7
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
			switch (Copy_u8PinDir) {
    1cde:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	3a 87       	std	Y+10, r19	; 0x0a
    1ce6:	29 87       	std	Y+9, r18	; 0x09
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	d1 f0       	breq	.+52     	; 0x1d24 <DIO_u8WritePinDir+0x130>
    1cf0:	29 85       	ldd	r18, Y+9	; 0x09
    1cf2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cf4:	21 30       	cpi	r18, 0x01	; 1
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <DIO_u8WritePinDir+0x108>
    1cfa:	a3 c0       	rjmp	.+326    	; 0x1e42 <DIO_u8WritePinDir+0x24e>

			case DIO_u8HIGH:
				DDRB=Setbit(DDRB, Copy_u8PinIdx);
    1cfc:	a7 e3       	ldi	r26, 0x37	; 55
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e7 e3       	ldi	r30, 0x37	; 55
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <DIO_u8WritePinDir+0x126>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <DIO_u8WritePinDir+0x122>
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
    1d22:	8f c0       	rjmp	.+286    	; 0x1e42 <DIO_u8WritePinDir+0x24e>
				break;
			case DIO_u8LOW:
				DDRB=Clrbit(DDRB, Copy_u8PinIdx);
    1d24:	a7 e3       	ldi	r26, 0x37	; 55
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e7 e3       	ldi	r30, 0x37	; 55
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_u8WritePinDir+0x14e>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <DIO_u8WritePinDir+0x14a>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	7a c0       	rjmp	.+244    	; 0x1e42 <DIO_u8WritePinDir+0x24e>
			default:
				break;
			}
			break;
		case DIO_u8PORT2:
			local_u8OperationStatus = ok;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	8a 83       	std	Y+2, r24	; 0x02
			Copy_u8PinIdx = Copy_u8PinIdx % DIO_u8PINSPERPORT;
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	87 70       	andi	r24, 0x07	; 7
    1d56:	8b 83       	std	Y+3, r24	; 0x03
			switch (Copy_u8PinDir) {
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	38 87       	std	Y+8, r19	; 0x08
    1d60:	2f 83       	std	Y+7, r18	; 0x07
    1d62:	8f 81       	ldd	r24, Y+7	; 0x07
    1d64:	98 85       	ldd	r25, Y+8	; 0x08
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	d1 f0       	breq	.+52     	; 0x1d9e <DIO_u8WritePinDir+0x1aa>
    1d6a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d6c:	38 85       	ldd	r19, Y+8	; 0x08
    1d6e:	21 30       	cpi	r18, 0x01	; 1
    1d70:	31 05       	cpc	r19, r1
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <DIO_u8WritePinDir+0x182>
    1d74:	66 c0       	rjmp	.+204    	; 0x1e42 <DIO_u8WritePinDir+0x24e>

			case DIO_u8HIGH:
				DDRC=Setbit(DDRC, Copy_u8PinIdx);
    1d76:	a4 e3       	ldi	r26, 0x34	; 52
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e4 e3       	ldi	r30, 0x34	; 52
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_u8WritePinDir+0x1a0>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_u8WritePinDir+0x19c>
    1d98:	84 2b       	or	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	52 c0       	rjmp	.+164    	; 0x1e42 <DIO_u8WritePinDir+0x24e>
				break;
			case DIO_u8LOW:
				DDRC=Clrbit(DDRC, Copy_u8PinIdx);
    1d9e:	a4 e3       	ldi	r26, 0x34	; 52
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e4 e3       	ldi	r30, 0x34	; 52
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_u8WritePinDir+0x1c8>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <DIO_u8WritePinDir+0x1c4>
    1dc0:	80 95       	com	r24
    1dc2:	84 23       	and	r24, r20
    1dc4:	8c 93       	st	X, r24
    1dc6:	3d c0       	rjmp	.+122    	; 0x1e42 <DIO_u8WritePinDir+0x24e>
			default:
				break;
			}
			break;
		case DIO_u8PORT3:
			local_u8OperationStatus = ok;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	8a 83       	std	Y+2, r24	; 0x02
			Copy_u8PinIdx = Copy_u8PinIdx % DIO_u8PINSPERPORT;
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	87 70       	andi	r24, 0x07	; 7
    1dd0:	8b 83       	std	Y+3, r24	; 0x03
			switch (Copy_u8PinDir) {
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	3e 83       	std	Y+6, r19	; 0x06
    1dda:	2d 83       	std	Y+5, r18	; 0x05
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	c9 f0       	breq	.+50     	; 0x1e16 <DIO_u8WritePinDir+0x222>
    1de4:	2d 81       	ldd	r18, Y+5	; 0x05
    1de6:	3e 81       	ldd	r19, Y+6	; 0x06
    1de8:	21 30       	cpi	r18, 0x01	; 1
    1dea:	31 05       	cpc	r19, r1
    1dec:	51 f5       	brne	.+84     	; 0x1e42 <DIO_u8WritePinDir+0x24e>

			case DIO_u8HIGH:
				DDRD=Setbit(DDRD, Copy_u8PinIdx);
    1dee:	a1 e3       	ldi	r26, 0x31	; 49
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e1 e3       	ldi	r30, 0x31	; 49
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <DIO_u8WritePinDir+0x218>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <DIO_u8WritePinDir+0x214>
    1e10:	84 2b       	or	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	16 c0       	rjmp	.+44     	; 0x1e42 <DIO_u8WritePinDir+0x24e>
				break;
			case DIO_u8LOW:
				DDRD=Clrbit(DDRD, Copy_u8PinIdx);
    1e16:	a1 e3       	ldi	r26, 0x31	; 49
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e1 e3       	ldi	r30, 0x31	; 49
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	02 2e       	mov	r0, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <DIO_u8WritePinDir+0x240>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <DIO_u8WritePinDir+0x23c>
    1e38:	80 95       	com	r24
    1e3a:	84 23       	and	r24, r20
    1e3c:	8c 93       	st	X, r24
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <DIO_u8WritePinDir+0x24e>
			default:
				break;
			}
			break;
		default:
			local_u8OperationStatus = error;
    1e40:	1a 82       	std	Y+2, r1	; 0x02
			break;

		}

		return local_u8OperationStatus;
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e44:	2e 96       	adiw	r28, 0x0e	; 14
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <Timer0_voidSet_ISR>:
static void (* Timer0_InteruptPointer)(void);
static void (* Timer0_InteruptPointerTCNT0)(void);


void Timer0_voidSet_ISR(void (*Copy_PtrToISR)(void))
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <Timer0_voidSet_ISR+0x6>
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
	Timer0_InteruptPointer=Copy_PtrToISR;
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	90 93 5f 01 	sts	0x015F, r25
    1e6c:	80 93 5e 01 	sts	0x015E, r24
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <Timer0_voidSet_ISRCompareMatch>:

void Timer0_voidSet_ISRCompareMatch(void (*Copy_PtrToISR)(void))
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <Timer0_voidSet_ISRCompareMatch+0x6>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
	Timer0_InteruptPointerTCNT0=Copy_PtrToISR;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	90 93 61 01 	sts	0x0161, r25
    1e90:	80 93 60 01 	sts	0x0160, r24
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <Timer0_voidInit>:


void Timer0_voidInit(void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
		//	//the prescaler =64
			TIMER0_u8TCCR0=0X03;
    1ea6:	e3 e5       	ldi	r30, 0x53	; 83
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	83 e0       	ldi	r24, 0x03	; 3
    1eac:	80 83       	st	Z, r24
			TIMER0_u8TIMSK=Setbit(TIMER0_u8TIMSK,TIMER0_u8TIMSK_TOIE0);//over flow Iterupt Interupt
    1eae:	a9 e5       	ldi	r26, 0x59	; 89
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e9 e5       	ldi	r30, 0x59	; 89
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	81 60       	ori	r24, 0x01	; 1
    1eba:	8c 93       	st	X, r24
			TIMER0_u8TIMSK=Setbit(TIMER0_u8TIMSK,TIMER0_u8TIMSK_TOCIE0);//COMPARE MATCH iNTERUPT
    1ebc:	a9 e5       	ldi	r26, 0x59	; 89
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e9 e5       	ldi	r30, 0x59	; 89
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	82 60       	ori	r24, 0x02	; 2
    1ec8:	8c 93       	st	X, r24
			//enable Glopal Interupt
			__asm__("SEI");
    1eca:	78 94       	sei
}
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <Timer0_voidReadTimer0TCNT0>:
void Timer0_voidReadTimer0TCNT0(u8 *ptrToVal)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <Timer0_voidReadTimer0TCNT0+0x6>
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
	*ptrToVal=TIMER0_u8TCNT0;
    1ee0:	e2 e5       	ldi	r30, 0x52	; 82
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	80 83       	st	Z, r24
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <Timer0_voidCheckForInterupt>:


void Timer0_voidCheckForInterupt(u8 *ptrToValOverflow,u8 *ptrToValCompareMatch)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <Timer0_voidCheckForInterupt+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <Timer0_voidCheckForInterupt+0x8>
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	7c 83       	std	Y+4, r23	; 0x04
    1f08:	6b 83       	std	Y+3, r22	; 0x03
	*ptrToValOverflow=GetBit(TIMER0_u8TIFR,TIMER0_u8TIFR_TOV0);
    1f0a:	e8 e5       	ldi	r30, 0x58	; 88
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	81 70       	andi	r24, 0x01	; 1
    1f12:	e9 81       	ldd	r30, Y+1	; 0x01
    1f14:	fa 81       	ldd	r31, Y+2	; 0x02
    1f16:	80 83       	st	Z, r24
	*ptrToValCompareMatch=GetBit(TIMER0_u8TIFR,TIMER0_u8TIFR_OCF0);
    1f18:	e8 e5       	ldi	r30, 0x58	; 88
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	82 70       	andi	r24, 0x02	; 2
    1f24:	90 70       	andi	r25, 0x00	; 0
    1f26:	95 95       	asr	r25
    1f28:	87 95       	ror	r24
    1f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f2e:	80 83       	st	Z, r24
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <__vector_11>:


//timer 0 over flow ISR
ISR(__vector_11) {
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
    1f48:	2f 93       	push	r18
    1f4a:	3f 93       	push	r19
    1f4c:	4f 93       	push	r20
    1f4e:	5f 93       	push	r21
    1f50:	6f 93       	push	r22
    1f52:	7f 93       	push	r23
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
	Timer0_InteruptPointer();
    1f68:	e0 91 5e 01 	lds	r30, 0x015E
    1f6c:	f0 91 5f 01 	lds	r31, 0x015F
    1f70:	09 95       	icall
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	bf 91       	pop	r27
    1f7c:	af 91       	pop	r26
    1f7e:	9f 91       	pop	r25
    1f80:	8f 91       	pop	r24
    1f82:	7f 91       	pop	r23
    1f84:	6f 91       	pop	r22
    1f86:	5f 91       	pop	r21
    1f88:	4f 91       	pop	r20
    1f8a:	3f 91       	pop	r19
    1f8c:	2f 91       	pop	r18
    1f8e:	0f 90       	pop	r0
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	0f 90       	pop	r0
    1f94:	1f 90       	pop	r1
    1f96:	18 95       	reti

00001f98 <__vector_10>:


//timer 0 over flow ISR
ISR(__vector_10) {
    1f98:	1f 92       	push	r1
    1f9a:	0f 92       	push	r0
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	0f 92       	push	r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	2f 93       	push	r18
    1fa4:	3f 93       	push	r19
    1fa6:	4f 93       	push	r20
    1fa8:	5f 93       	push	r21
    1faa:	6f 93       	push	r22
    1fac:	7f 93       	push	r23
    1fae:	8f 93       	push	r24
    1fb0:	9f 93       	push	r25
    1fb2:	af 93       	push	r26
    1fb4:	bf 93       	push	r27
    1fb6:	ef 93       	push	r30
    1fb8:	ff 93       	push	r31
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
	Timer0_InteruptPointerTCNT0();
    1fc2:	e0 91 60 01 	lds	r30, 0x0160
    1fc6:	f0 91 61 01 	lds	r31, 0x0161
    1fca:	09 95       	icall
}
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	ff 91       	pop	r31
    1fd2:	ef 91       	pop	r30
    1fd4:	bf 91       	pop	r27
    1fd6:	af 91       	pop	r26
    1fd8:	9f 91       	pop	r25
    1fda:	8f 91       	pop	r24
    1fdc:	7f 91       	pop	r23
    1fde:	6f 91       	pop	r22
    1fe0:	5f 91       	pop	r21
    1fe2:	4f 91       	pop	r20
    1fe4:	3f 91       	pop	r19
    1fe6:	2f 91       	pop	r18
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	0f 90       	pop	r0
    1fee:	1f 90       	pop	r1
    1ff0:	18 95       	reti

00001ff2 <ADC_voidinit>:
#include "ADC_Private.h"
#include "ADC_Interface.h"

/*comment:! to initialize  the ADC */
void ADC_voidinit(void)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
//	ADC_ADCSRA
    ADC_ADCSRA=ADC_u8privADCSRA;
    1ffa:	e6 e2       	ldi	r30, 0x26	; 38
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	87 e0       	ldi	r24, 0x07	; 7
    2000:	80 83       	st	Z, r24
//	ADC_ADMUX
	ADC_ADMUX=ADC_u8privADMUX;
    2002:	e7 e2       	ldi	r30, 0x27	; 39
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 e6       	ldi	r24, 0x60	; 96
    2008:	80 83       	st	Z, r24
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <ADC_u16ReadChannelFiltered>:

/*comment:! to ReadChannelFiltered (3 reading /3)  the ADC */

extern u16 ADC_u16ReadChannelFiltered(u8 copy_u8ChannelNo,u8 *copy_u8completeflag){}
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <ADC_u16ReadChannelFiltered+0x6>
    2016:	00 d0       	rcall	.+0      	; 0x2018 <ADC_u16ReadChannelFiltered+0x8>
    2018:	0f 92       	push	r0
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	7b 83       	std	Y+3, r23	; 0x03
    2022:	6a 83       	std	Y+2, r22	; 0x02
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <ADC_u16ReadChannelOneShot>:

/*comment:! to ADC_u16ReadChannelOneShot  the ADC  dont forget to enable the adc befor using this api */
extern u16 ADC_u16ReadChannelOneShot(u8 copy_u8ChannelNo,u8 *copy_u8completeflag) {
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <ADC_u16ReadChannelOneShot+0x6>
    203a:	00 d0       	rcall	.+0      	; 0x203c <ADC_u16ReadChannelOneShot+0x8>
    203c:	00 d0       	rcall	.+0      	; 0x203e <ADC_u16ReadChannelOneShot+0xa>
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	8c 83       	std	Y+4, r24	; 0x04
    2044:	7e 83       	std	Y+6, r23	; 0x06
    2046:	6d 83       	std	Y+5, r22	; 0x05
		u16 local_u16valToReturn=0;
    2048:	1b 82       	std	Y+3, r1	; 0x03
    204a:	1a 82       	std	Y+2, r1	; 0x02
		u8 local_u8tempLowval=0;
    204c:	19 82       	std	Y+1, r1	; 0x01
	//configure the channel
	if (copy_u8ChannelNo >= ADC_U8Channel1 && copy_u8ChannelNo <= ADC_U8Channel8) {
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	88 30       	cpi	r24, 0x08	; 8
    2052:	08 f0       	brcs	.+2      	; 0x2056 <ADC_u16ReadChannelOneShot+0x22>
    2054:	50 c0       	rjmp	.+160    	; 0x20f6 <ADC_u16ReadChannelOneShot+0xc2>

		ADC_ADMUX &=0b11111000;
    2056:	a7 e2       	ldi	r26, 0x27	; 39
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e7 e2       	ldi	r30, 0x27	; 39
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	88 7f       	andi	r24, 0xF8	; 248
    2062:	8c 93       	st	X, r24
		ADC_ADMUX |= copy_u8ChannelNo;
    2064:	a7 e2       	ldi	r26, 0x27	; 39
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e7 e2       	ldi	r30, 0x27	; 39
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	90 81       	ld	r25, Z
    206e:	8c 81       	ldd	r24, Y+4	; 0x04
    2070:	89 2b       	or	r24, r25
    2072:	8c 93       	st	X, r24
		//TODO make it none bussy loop and use the complete flag
		//wait fr the convertion to happens
		//wait till the adc flag is set
		//start conversion
	    ADC_ADCSRA = Setbit(ADC_ADCSRA, ADC_U8ADMUX_ADSC);
    2074:	a6 e2       	ldi	r26, 0x26	; 38
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e6 e2       	ldi	r30, 0x26	; 38
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	80 64       	ori	r24, 0x40	; 64
    2080:	8c 93       	st	X, r24
		while(GetBit(ADC_ADCSRA,ADC_U8ADMUX_ADIF)==0)
    2082:	e6 e2       	ldi	r30, 0x26	; 38
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	80 71       	andi	r24, 0x10	; 16
    208e:	90 70       	andi	r25, 0x00	; 0
    2090:	95 95       	asr	r25
    2092:	87 95       	ror	r24
    2094:	95 95       	asr	r25
    2096:	87 95       	ror	r24
    2098:	95 95       	asr	r25
    209a:	87 95       	ror	r24
    209c:	95 95       	asr	r25
    209e:	87 95       	ror	r24
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	79 f3       	breq	.-34     	; 0x2082 <ADC_u16ReadChannelOneShot+0x4e>
			local_u16valToReturn=ADC_ADCH;
			local_u16valToReturn<<=8;
			local_u16valToReturn|=local_u8tempLowval;
			break;
		case ADC_u8LEFTADJUST:
			local_u8tempLowval=ADC_ADCL;
    20a4:	e4 e2       	ldi	r30, 0x24	; 36
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	89 83       	std	Y+1, r24	; 0x01
			local_u8tempLowval>>=6;
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	82 95       	swap	r24
    20b0:	86 95       	lsr	r24
    20b2:	86 95       	lsr	r24
    20b4:	83 70       	andi	r24, 0x03	; 3
    20b6:	89 83       	std	Y+1, r24	; 0x01
			local_u16valToReturn=ADC_ADCH;
    20b8:	e5 e2       	ldi	r30, 0x25	; 37
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9b 83       	std	Y+3, r25	; 0x03
    20c4:	8a 83       	std	Y+2, r24	; 0x02
			local_u16valToReturn<<=2;
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	9b 83       	std	Y+3, r25	; 0x03
    20d4:	8a 83       	std	Y+2, r24	; 0x02
			local_u16valToReturn|=local_u8tempLowval;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	82 2b       	or	r24, r18
    20e2:	93 2b       	or	r25, r19
    20e4:	9b 83       	std	Y+3, r25	; 0x03
    20e6:	8a 83       	std	Y+2, r24	; 0x02
		default:

			break;

		}
		ADC_ADCSRA=Setbit(ADC_ADCSRA,ADC_U8ADMUX_ADIF);
    20e8:	a6 e2       	ldi	r26, 0x26	; 38
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e6 e2       	ldi	r30, 0x26	; 38
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	80 61       	ori	r24, 0x10	; 16
    20f4:	8c 93       	st	X, r24
	} else {

	}
return(local_u16valToReturn);
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	9b 81       	ldd	r25, Y+3	; 0x03
}
    20fa:	26 96       	adiw	r28, 0x06	; 6
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <ADC_structReadGroup>:

/*comment:! to ADC_structReadGroup from copy_u8FirstADCToRead to  copy_u8LastADCToRead  the ADC */
extern ADC_StructADCAll ADC_structReadGroup(u8 copy_u8FirstADCToRead,u8 copy_u8LastADCToRead){}
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <ADC_structReadGroup+0x6>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	69 83       	std	Y+1, r22	; 0x01
    2118:	4a 83       	std	Y+2, r20	; 0x02
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <ADC_voidEnable>:

/*comment:! to  Enable  the ADC */
extern void ADC_voidEnable(void) {
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA = Setbit(ADC_ADCSRA, ADC_U8ADMUX_ADEN);
    212c:	a6 e2       	ldi	r26, 0x26	; 38
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e6 e2       	ldi	r30, 0x26	; 38
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	80 68       	ori	r24, 0x80	; 128
    2138:	8c 93       	st	X, r24
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <ADC_voidDisable>:
/*comment:! to  disable  the ADC */
extern void ADC_voidDisable(void) {
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA = Clrbit(ADC_ADCSRA, ADC_U8ADMUX_ADEN);
    2148:	a6 e2       	ldi	r26, 0x26	; 38
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8f 77       	andi	r24, 0x7F	; 127
    2154:	8c 93       	st	X, r24
}
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <_exit>:
    215c:	f8 94       	cli

0000215e <__stop_program>:
    215e:	ff cf       	rjmp	.-2      	; 0x215e <__stop_program>
